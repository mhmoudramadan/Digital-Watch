
DIGITAL_WATCH.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000025c2  00002656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080007c  0080007c  00002672  2**0
                  ALLOC
  3 .stab         00002430  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001252  00000000  00000000  00004aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007bef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009888  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000099e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__vector_1>
       8:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_2>
       c:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__vector_6>
      1c:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_7>
      20:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__vector_8>
      24:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f6 11 	call	0x23ec	; 0x23ec <main>
      8a:	0c 94 df 12 	jmp	0x25be	; 0x25be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b4 12 	jmp	0x2568	; 0x2568 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b8 12 	jmp	0x2570	; 0x2570 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d4 12 	jmp	0x25a8	; 0x25a8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER1_VidInit>:


void (*MTIMER1_CALLBACK)(void);

void MTIMER1_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
#if TIMER1SETMODE == TIMER1_CTCMODE

	 CLR_BIT(TCCR1A,0);
     b4e:	af e4       	ldi	r26, 0x4F	; 79
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e4       	ldi	r30, 0x4F	; 79
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,1);
     b5c:	af e4       	ldi	r26, 0x4F	; 79
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e4       	ldi	r30, 0x4F	; 79
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8d 7f       	andi	r24, 0xFD	; 253
     b68:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,3);
     b6a:	ae e4       	ldi	r26, 0x4E	; 78
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ee e4       	ldi	r30, 0x4E	; 78
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,4);
     b78:	ae e4       	ldi	r26, 0x4E	; 78
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ee e4       	ldi	r30, 0x4E	; 78
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7e       	andi	r24, 0xEF	; 239
     b84:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,4);
	 SET_BIT(TCCR1A,5);
	 CLR_BIT(TCCR1A,6);
	 SET_BIT(TCCR1A,7);
	#elif TIMER1_CTCMODE_OC1A_OC1BPINMODE== TIMER1_CTCMODE_OC1A_OC1BPIN_NOTCONNECTED
	 CLR_BIT(TCCR1A,4);
     b86:	af e4       	ldi	r26, 0x4F	; 79
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ef e4       	ldi	r30, 0x4F	; 79
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7e       	andi	r24, 0xEF	; 239
     b92:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,5);
     b94:	af e4       	ldi	r26, 0x4F	; 79
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ef e4       	ldi	r30, 0x4F	; 79
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,6);
     ba2:	af e4       	ldi	r26, 0x4F	; 79
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ef e4       	ldi	r30, 0x4F	; 79
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7b       	andi	r24, 0xBF	; 191
     bae:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,7);
     bb0:	af e4       	ldi	r26, 0x4F	; 79
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e4       	ldi	r30, 0x4F	; 79
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	8c 93       	st	X, r24

	#else
	 #error"OC1A And OC1B Options Is Not Valid.."
	#endif
	/*Compare Match Enable Interrupt*/
	SET_BIT(TIMSK,4);
     bbe:	a9 e5       	ldi	r26, 0x59	; 89
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e9 e5       	ldi	r30, 0x59	; 89
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 61       	ori	r24, 0x10	; 16
     bca:	8c 93       	st	X, r24
	SET_BIT(TIMSK,3);
     bcc:	a9 e5       	ldi	r26, 0x59	; 89
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e9 e5       	ldi	r30, 0x59	; 89
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	88 60       	ori	r24, 0x08	; 8
     bd8:	8c 93       	st	X, r24
#else
#error "Timer 1 Options Is Not Valid."
#endif

/*********SET PRESCALER *********/
	TCCR1B&=0xF8;
     bda:	ae e4       	ldi	r26, 0x4E	; 78
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ee e4       	ldi	r30, 0x4E	; 78
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 7f       	andi	r24, 0xF8	; 248
     be6:	8c 93       	st	X, r24
	TCCR1B|=TIMER1_SETPRESCALER;
     be8:	ae e4       	ldi	r26, 0x4E	; 78
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	84 60       	ori	r24, 0x04	; 4
     bf4:	8c 93       	st	X, r24
}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <MTIMER1_VidInit_ICU>:
void MTIMER1_VidInit_ICU(void)
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,5);
     c04:	a9 e5       	ldi	r26, 0x59	; 89
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e9 e5       	ldi	r30, 0x59	; 89
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	80 62       	ori	r24, 0x20	; 32
     c10:	8c 93       	st	X, r24
	    /*Enable ICU Noise Canceler */
	SET_BIT(TCCR1B,7);
     c12:	ae e4       	ldi	r26, 0x4E	; 78
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ee e4       	ldi	r30, 0x4E	; 78
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	80 68       	ori	r24, 0x80	; 128
     c1e:	8c 93       	st	X, r24
}
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <MTIMER1_VidICU_SelectEdge>:
void MTIMER1_VidICU_SelectEdge(uint8 copy_uint8SelectEgde)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <MTIMER1_VidICU_SelectEdge+0x6>
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_uint8SelectEgde)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	3b 83       	std	Y+3, r19	; 0x03
     c3c:	2a 83       	std	Y+2, r18	; 0x02
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	9b 81       	ldd	r25, Y+3	; 0x03
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	69 f0       	breq	.+26     	; 0xc60 <MTIMER1_VidICU_SelectEdge+0x3a>
     c46:	2a 81       	ldd	r18, Y+2	; 0x02
     c48:	3b 81       	ldd	r19, Y+3	; 0x03
     c4a:	21 30       	cpi	r18, 0x01	; 1
     c4c:	31 05       	cpc	r19, r1
     c4e:	79 f4       	brne	.+30     	; 0xc6e <MTIMER1_VidICU_SelectEdge+0x48>
	{
	case ICU_RISING_EDGE:
	{
	     SET_BIT(TCCR1B,6);
     c50:	ae e4       	ldi	r26, 0x4E	; 78
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	ee e4       	ldi	r30, 0x4E	; 78
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	80 81       	ld	r24, Z
     c5a:	80 64       	ori	r24, 0x40	; 64
     c5c:	8c 93       	st	X, r24
     c5e:	07 c0       	rjmp	.+14     	; 0xc6e <MTIMER1_VidICU_SelectEdge+0x48>
	     break;
	}
	case ICU_FALLING_EDGE:
	{
		CLR_BIT(TCCR1B,6);
     c60:	ae e4       	ldi	r26, 0x4E	; 78
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ee e4       	ldi	r30, 0x4E	; 78
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8f 7b       	andi	r24, 0xBF	; 191
     c6c:	8c 93       	st	X, r24
		break;
	}

	}
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <MTIMER1_VidSetPreLoad>:
void MTIMER1_VidSetPreLoad(uint16 copy_uint16PreLoadvalue)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <MTIMER1_VidSetPreLoad+0x6>
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
	/*Normal mode data Register*/
	//uint16 TCNT1;
	TCNT1=copy_uint16PreLoadvalue;
     c88:	ec e4       	ldi	r30, 0x4C	; 76
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	80 83       	st	Z, r24
	/*TCNT1=TCNT1H;
	TCNT1|=TCNT1L<<8;
	TCNT1=copy_uint8PreLoadvalue;*/
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <MTIMER1_VidSetCTCRegister_CHB>:
void MTIMER1_VidSetCTCRegister_CHB(uint16 copy_uint16CTCValue)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <MTIMER1_VidSetCTCRegister_CHB+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=copy_uint16CTCValue;
     cac:	e8 e4       	ldi	r30, 0x48	; 72
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	91 83       	std	Z+1, r25	; 0x01
     cb6:	80 83       	st	Z, r24
	/*OutPut Compare match B option*/
	/*OCR1B=OCR1BH;
	OCR1B|=OCR1BL<<8;
	OCR1B=copy_uint16CTCValue;*/
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <MTIMER1_VidSetCTCRegister_CHA>:
void MTIMER1_VidSetCTCRegister_CHA(uint16 copy_uint16CTCValue)
{
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <MTIMER1_VidSetCTCRegister_CHA+0x6>
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=copy_uint16CTCValue;
     cd0:	ea e4       	ldi	r30, 0x4A	; 74
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	91 83       	std	Z+1, r25	; 0x01
     cda:	80 83       	st	Z, r24
	/*OutPut Compare match A option*/
	//OCR1A=copy_uint16CTCValue;
	/*OCR1A=OCR1AH;
		OCR1A|=OCR1AL<<8;
		OCR1A=copy_uint16CTCValue;*/
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <MTIMER1_VidSetCTCRegister_ICR1>:
void MTIMER1_VidSetCTCRegister_ICR1(uint16 copy_uint16CTCValue)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <MTIMER1_VidSetCTCRegister_ICR1+0x6>
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
	ICR1=copy_uint16CTCValue;
     cf4:	e6 e4       	ldi	r30, 0x46	; 70
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
}
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <MTIMER1_VidTimer1_OverFlow_SetCallBack>:
void MTIMER1_VidTimer1_OverFlow_SetCallBack(void (*PtrToFun)(void))
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <MTIMER1_VidTimer1_OverFlow_SetCallBack+0x6>
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	9a 83       	std	Y+2, r25	; 0x02
     d16:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	90 93 81 00 	sts	0x0081, r25
     d20:	80 93 80 00 	sts	0x0080, r24
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <MTIMER1_VidTimer1_CTC_SetCallBack>:
void MTIMER1_VidTimer1_CTC_SetCallBack(void (*PtrToFun)(void))
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	00 d0       	rcall	.+0      	; 0xd34 <MTIMER1_VidTimer1_CTC_SetCallBack+0x6>
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	90 93 81 00 	sts	0x0081, r25
     d44:	80 93 80 00 	sts	0x0080, r24
}
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	cf 91       	pop	r28
     d4e:	df 91       	pop	r29
     d50:	08 95       	ret

00000d52 <MTIMER1_uint32Read_ICR1>:

uint32 MTIMER1_uint32Read_ICR1(void)
{
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
     d5a:	e6 e4       	ldi	r30, 0x46	; 70
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	91 81       	ldd	r25, Z+1	; 0x01
     d62:	cc 01       	movw	r24, r24
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e0       	ldi	r27, 0x00	; 0
}
     d68:	bc 01       	movw	r22, r24
     d6a:	cd 01       	movw	r24, r26
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <MTIMER1_VidTimer1_ICU_SetCallBack>:
void MTIMER1_VidTimer1_ICU_SetCallBack(void(*PtrToFun)(void))
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <MTIMER1_VidTimer1_ICU_SetCallBack+0x6>
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_CALLBACK=PtrToFun;
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	90 93 81 00 	sts	0x0081, r25
     d88:	80 93 80 00 	sts	0x0080, r24
}
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	cf 91       	pop	r28
     d92:	df 91       	pop	r29
     d94:	08 95       	ret

00000d96 <__vector_7>:
     /*Compare A*/
void __vector_7(void)  __attribute__((signal));
void __vector_7(void)
{
     d96:	1f 92       	push	r1
     d98:	0f 92       	push	r0
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	0f 92       	push	r0
     d9e:	11 24       	eor	r1, r1
     da0:	2f 93       	push	r18
     da2:	3f 93       	push	r19
     da4:	4f 93       	push	r20
     da6:	5f 93       	push	r21
     da8:	6f 93       	push	r22
     daa:	7f 93       	push	r23
     dac:	8f 93       	push	r24
     dae:	9f 93       	push	r25
     db0:	af 93       	push	r26
     db2:	bf 93       	push	r27
     db4:	ef 93       	push	r30
     db6:	ff 93       	push	r31
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     dc0:	e0 91 80 00 	lds	r30, 0x0080
     dc4:	f0 91 81 00 	lds	r31, 0x0081
     dc8:	09 95       	icall
}
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	ff 91       	pop	r31
     dd0:	ef 91       	pop	r30
     dd2:	bf 91       	pop	r27
     dd4:	af 91       	pop	r26
     dd6:	9f 91       	pop	r25
     dd8:	8f 91       	pop	r24
     dda:	7f 91       	pop	r23
     ddc:	6f 91       	pop	r22
     dde:	5f 91       	pop	r21
     de0:	4f 91       	pop	r20
     de2:	3f 91       	pop	r19
     de4:	2f 91       	pop	r18
     de6:	0f 90       	pop	r0
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <__vector_8>:
   /*Compare B*/
void __vector_8(void)  __attribute__((signal));
void __vector_8(void)
{
     df0:	1f 92       	push	r1
     df2:	0f 92       	push	r0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	0f 92       	push	r0
     df8:	11 24       	eor	r1, r1
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     e1a:	e0 91 80 00 	lds	r30, 0x0080
     e1e:	f0 91 81 00 	lds	r31, 0x0081
     e22:	09 95       	icall
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	ff 91       	pop	r31
     e2a:	ef 91       	pop	r30
     e2c:	bf 91       	pop	r27
     e2e:	af 91       	pop	r26
     e30:	9f 91       	pop	r25
     e32:	8f 91       	pop	r24
     e34:	7f 91       	pop	r23
     e36:	6f 91       	pop	r22
     e38:	5f 91       	pop	r21
     e3a:	4f 91       	pop	r20
     e3c:	3f 91       	pop	r19
     e3e:	2f 91       	pop	r18
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <__vector_9>:
   /*OverFlow */
void __vector_9(void)  __attribute__((signal));
void __vector_9(void)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	2f 93       	push	r18
     e56:	3f 93       	push	r19
     e58:	4f 93       	push	r20
     e5a:	5f 93       	push	r21
     e5c:	6f 93       	push	r22
     e5e:	7f 93       	push	r23
     e60:	8f 93       	push	r24
     e62:	9f 93       	push	r25
     e64:	af 93       	push	r26
     e66:	bf 93       	push	r27
     e68:	ef 93       	push	r30
     e6a:	ff 93       	push	r31
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     e74:	e0 91 80 00 	lds	r30, 0x0080
     e78:	f0 91 81 00 	lds	r31, 0x0081
     e7c:	09 95       	icall
}
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	ff 91       	pop	r31
     e84:	ef 91       	pop	r30
     e86:	bf 91       	pop	r27
     e88:	af 91       	pop	r26
     e8a:	9f 91       	pop	r25
     e8c:	8f 91       	pop	r24
     e8e:	7f 91       	pop	r23
     e90:	6f 91       	pop	r22
     e92:	5f 91       	pop	r21
     e94:	4f 91       	pop	r20
     e96:	3f 91       	pop	r19
     e98:	2f 91       	pop	r18
     e9a:	0f 90       	pop	r0
     e9c:	0f be       	out	0x3f, r0	; 63
     e9e:	0f 90       	pop	r0
     ea0:	1f 90       	pop	r1
     ea2:	18 95       	reti

00000ea4 <__vector_6>:
  /*ICU*/
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
     ea4:	1f 92       	push	r1
     ea6:	0f 92       	push	r0
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	0f 92       	push	r0
     eac:	11 24       	eor	r1, r1
     eae:	2f 93       	push	r18
     eb0:	3f 93       	push	r19
     eb2:	4f 93       	push	r20
     eb4:	5f 93       	push	r21
     eb6:	6f 93       	push	r22
     eb8:	7f 93       	push	r23
     eba:	8f 93       	push	r24
     ebc:	9f 93       	push	r25
     ebe:	af 93       	push	r26
     ec0:	bf 93       	push	r27
     ec2:	ef 93       	push	r30
     ec4:	ff 93       	push	r31
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
	MTIMER1_CALLBACK();
     ece:	e0 91 80 00 	lds	r30, 0x0080
     ed2:	f0 91 81 00 	lds	r31, 0x0081
     ed6:	09 95       	icall
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	ff 91       	pop	r31
     ede:	ef 91       	pop	r30
     ee0:	bf 91       	pop	r27
     ee2:	af 91       	pop	r26
     ee4:	9f 91       	pop	r25
     ee6:	8f 91       	pop	r24
     ee8:	7f 91       	pop	r23
     eea:	6f 91       	pop	r22
     eec:	5f 91       	pop	r21
     eee:	4f 91       	pop	r20
     ef0:	3f 91       	pop	r19
     ef2:	2f 91       	pop	r18
     ef4:	0f 90       	pop	r0
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	0f 90       	pop	r0
     efa:	1f 90       	pop	r1
     efc:	18 95       	reti

00000efe <MGIE_Enable>:

#include"../../LIB/LSTD_TYPES.h"
#include"../../LIB/LBIT_MATH.h"
#include"MGIE_Private.h"
void MGIE_Enable(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     f06:	af e5       	ldi	r26, 0x5F	; 95
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ef e5       	ldi	r30, 0x5F	; 95
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	8c 93       	st	X, r24
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <MGIE_Disable>:
void MGIE_Disable(void)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     f22:	af e5       	ldi	r26, 0x5F	; 95
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ef e5       	ldi	r30, 0x5F	; 95
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	8c 93       	st	X, r24
}
     f30:	cf 91       	pop	r28
     f32:	df 91       	pop	r29
     f34:	08 95       	ret

00000f36 <MEXTI_VidInitEXTI0>:
#include "MEXTI_Config.h"

void (*CALLBACK)(void);

void MEXTI_VidInitEXTI0(void)
{
     f36:	df 93       	push	r29
     f38:	cf 93       	push	r28
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
	/*Select sense control*/
#if SET_SENCECONTROL_EXTI0==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,0);
#elif SET_SENCECONTROL_EXTI0==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,1);
     f3e:	a5 e5       	ldi	r26, 0x55	; 85
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e5 e5       	ldi	r30, 0x55	; 85
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,0);
     f4c:	a5 e5       	ldi	r26, 0x55	; 85
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e5       	ldi	r30, 0x55	; 85
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI0 is not valid"

#endif
	/*Enable EXTI 0*/
	SET_BIT(GICR,6);
     f5a:	ab e5       	ldi	r26, 0x5B	; 91
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	eb e5       	ldi	r30, 0x5B	; 91
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 64       	ori	r24, 0x40	; 64
     f66:	8c 93       	st	X, r24

}
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <MEXTI_VidInitEXTI1>:
void MEXTI_VidInitEXTI1(void)
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
#if SET_SENCECONTROL_EXTI1==MEXTI_RISING_EDGE
	SET_BIT(MCUCR,3);
	SET_BIT(MCUCR,2);

#elif SET_SENCECONTROL_EXTI1==MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,3);
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	88 60       	ori	r24, 0x08	; 8
     f82:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,2);
     f84:	a5 e5       	ldi	r26, 0x55	; 85
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e5       	ldi	r30, 0x55	; 85
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8b 7f       	andi	r24, 0xFB	; 251
     f90:	8c 93       	st	X, r24
#else
#error "Sense Control option of EXTI1 is not valid"

#endif
	/* Enable EXTI 1*/
	SET_BIT(GICR,7);
     f92:	ab e5       	ldi	r26, 0x5B	; 91
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	eb e5       	ldi	r30, 0x5B	; 91
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	8c 93       	st	X, r24
}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <MEXTI_VidInitEXTI2>:
void MEXTI_VidInitEXTI2(void)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control */
	#if SET_SENCECONTROL_EXTI2==MEXTI_RISING_EDGE
		SET_BIT(MCUCSR,6);
	#elif SET_SENCECONTROL_EXTI2==MEXTI_FALLING_EDGE
		CLR_BIT(MCUCSR,6);
     fae:	a4 e5       	ldi	r26, 0x54	; 84
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e4 e5       	ldi	r30, 0x54	; 84
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8f 7b       	andi	r24, 0xBF	; 191
     fba:	8c 93       	st	X, r24
	#else
	#error "Sense Control option of EXTI2 is not valid"

	#endif
		/* Enable EXTI 2*/
		SET_BIT(GICR,5);
     fbc:	ab e5       	ldi	r26, 0x5B	; 91
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	eb e5       	ldi	r30, 0x5B	; 91
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	80 62       	ori	r24, 0x20	; 32
     fc8:	8c 93       	st	X, r24

}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <MEXTI_VidSenseControlSelect>:
void MEXTI_VidSenseControlSelect(uint8 copy_uint8EXTI_ID,uint8 copy_uint8EXTI_SenseControl)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <MEXTI_VidSenseControlSelect+0x6>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <MEXTI_VidSenseControlSelect+0x8>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	6a 83       	std	Y+2, r22	; 0x02
	switch (copy_uint8EXTI_ID)
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	3c 83       	std	Y+4, r19	; 0x04
     fe8:	2b 83       	std	Y+3, r18	; 0x03
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	91 05       	cpc	r25, r1
     ff2:	09 f4       	brne	.+2      	; 0xff6 <MEXTI_VidSenseControlSelect+0x26>
     ff4:	54 c0       	rjmp	.+168    	; 0x109e <MEXTI_VidSenseControlSelect+0xce>
     ff6:	2b 81       	ldd	r18, Y+3	; 0x03
     ff8:	3c 81       	ldd	r19, Y+4	; 0x04
     ffa:	22 30       	cpi	r18, 0x02	; 2
     ffc:	31 05       	cpc	r19, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <MEXTI_VidSenseControlSelect+0x32>
    1000:	96 c0       	rjmp	.+300    	; 0x112e <MEXTI_VidSenseControlSelect+0x15e>
    1002:	8b 81       	ldd	r24, Y+3	; 0x03
    1004:	9c 81       	ldd	r25, Y+4	; 0x04
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	09 f0       	breq	.+2      	; 0x100c <MEXTI_VidSenseControlSelect+0x3c>
    100a:	a6 c0       	rjmp	.+332    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
	{
	case EXTI0:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	88 23       	and	r24, r24
    1010:	79 f4       	brne	.+30     	; 0x1030 <MEXTI_VidSenseControlSelect+0x60>
		{
			SET_BIT(MCUCR,1);
    1012:	a5 e5       	ldi	r26, 0x55	; 85
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e5 e5       	ldi	r30, 0x55	; 85
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	82 60       	ori	r24, 0x02	; 2
    101e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1020:	a5 e5       	ldi	r26, 0x55	; 85
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e5 e5       	ldi	r30, 0x55	; 85
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	81 60       	ori	r24, 0x01	; 1
    102c:	8c 93       	st	X, r24
    102e:	94 c0       	rjmp	.+296    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	79 f4       	brne	.+30     	; 0x1054 <MEXTI_VidSenseControlSelect+0x84>
		{
			SET_BIT(MCUCR,1);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	82 60       	ori	r24, 0x02	; 2
    1042:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8e 7f       	andi	r24, 0xFE	; 254
    1050:	8c 93       	st	X, r24
    1052:	82 c0       	rjmp	.+260    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	79 f4       	brne	.+30     	; 0x1078 <MEXTI_VidSenseControlSelect+0xa8>
		{
			CLR_BIT(MCUCR,1);
    105a:	a5 e5       	ldi	r26, 0x55	; 85
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e5 e5       	ldi	r30, 0x55	; 85
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	8d 7f       	andi	r24, 0xFD	; 253
    1066:	8c 93       	st	X, r24
			SET_BIT(MCUCR,0);
    1068:	a5 e5       	ldi	r26, 0x55	; 85
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e5 e5       	ldi	r30, 0x55	; 85
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	81 60       	ori	r24, 0x01	; 1
    1074:	8c 93       	st	X, r24
    1076:	70 c0       	rjmp	.+224    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	09 f0       	breq	.+2      	; 0x1080 <MEXTI_VidSenseControlSelect+0xb0>
    107e:	6c c0       	rjmp	.+216    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,1);
    1080:	a5 e5       	ldi	r26, 0x55	; 85
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e5 e5       	ldi	r30, 0x55	; 85
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	8d 7f       	andi	r24, 0xFD	; 253
    108c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,0);
    108e:	a5 e5       	ldi	r26, 0x55	; 85
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e5 e5       	ldi	r30, 0x55	; 85
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	8e 7f       	andi	r24, 0xFE	; 254
    109a:	8c 93       	st	X, r24
    109c:	5d c0       	rjmp	.+186    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI1:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	88 23       	and	r24, r24
    10a2:	79 f4       	brne	.+30     	; 0x10c2 <MEXTI_VidSenseControlSelect+0xf2>
		{
			SET_BIT(MCUCR,3);
    10a4:	a5 e5       	ldi	r26, 0x55	; 85
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e5 e5       	ldi	r30, 0x55	; 85
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    10b2:	a5 e5       	ldi	r26, 0x55	; 85
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e5       	ldi	r30, 0x55	; 85
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	8c 93       	st	X, r24
    10c0:	4b c0       	rjmp	.+150    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	79 f4       	brne	.+30     	; 0x10e6 <MEXTI_VidSenseControlSelect+0x116>
		{
			SET_BIT(MCUCR,3);
    10c8:	a5 e5       	ldi	r26, 0x55	; 85
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e5 e5       	ldi	r30, 0x55	; 85
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	88 60       	ori	r24, 0x08	; 8
    10d4:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    10d6:	a5 e5       	ldi	r26, 0x55	; 85
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e5       	ldi	r30, 0x55	; 85
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	8b 7f       	andi	r24, 0xFB	; 251
    10e2:	8c 93       	st	X, r24
    10e4:	39 c0       	rjmp	.+114    	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_ANYLOGICALCHANGE)
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	79 f4       	brne	.+30     	; 0x110a <MEXTI_VidSenseControlSelect+0x13a>
		{
			CLR_BIT(MCUCR,3);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	87 7f       	andi	r24, 0xF7	; 247
    10f8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,2);
    10fa:	a5 e5       	ldi	r26, 0x55	; 85
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e5 e5       	ldi	r30, 0x55	; 85
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	84 60       	ori	r24, 0x04	; 4
    1106:	8c 93       	st	X, r24
    1108:	27 c0       	rjmp	.+78     	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_LOW_LEVEL)
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	83 30       	cpi	r24, 0x03	; 3
    110e:	21 f5       	brne	.+72     	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCR,3);
    1110:	a5 e5       	ldi	r26, 0x55	; 85
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e5       	ldi	r30, 0x55	; 85
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	87 7f       	andi	r24, 0xF7	; 247
    111c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,2);
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	8b 7f       	andi	r24, 0xFB	; 251
    112a:	8c 93       	st	X, r24
    112c:	15 c0       	rjmp	.+42     	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
			/*do nothing*/
		}
		break;

	case EXTI2:
		if(copy_uint8EXTI_SenseControl==MEXTI_RISING_EDGE)
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	88 23       	and	r24, r24
    1132:	41 f4       	brne	.+16     	; 0x1144 <MEXTI_VidSenseControlSelect+0x174>
		{
			SET_BIT(MCUCSR,6);
    1134:	a4 e5       	ldi	r26, 0x54	; 84
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e4 e5       	ldi	r30, 0x54	; 84
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 64       	ori	r24, 0x40	; 64
    1140:	8c 93       	st	X, r24
    1142:	0a c0       	rjmp	.+20     	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		}
		else if(copy_uint8EXTI_SenseControl==MEXTI_FALLING_EDGE)
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	39 f4       	brne	.+14     	; 0x1158 <MEXTI_VidSenseControlSelect+0x188>
		{
			CLR_BIT(MCUCSR,6);		}
    114a:	a4 e5       	ldi	r26, 0x54	; 84
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e4 e5       	ldi	r30, 0x54	; 84
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	8f 7b       	andi	r24, 0xBF	; 191
    1156:	8c 93       	st	X, r24
			/*do nothing*/
		}
		break;
	}

}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <MEXTI0_VidSetCallBack>:
void MEXTI0_VidSetCallBack(void (*PtrToFun)(void))
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <MEXTI0_VidSetCallBack+0x6>
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	90 93 83 00 	sts	0x0083, r25
    117c:	80 93 82 00 	sts	0x0082, r24
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <MEXTI1_VidSetCallBack>:
void MEXTI1_VidSetCallBack(void (*PtrToFun)(void))
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <MEXTI1_VidSetCallBack+0x6>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	90 93 83 00 	sts	0x0083, r25
    11a0:	80 93 82 00 	sts	0x0082, r24
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <MEXTI2_VidSetCallBack>:
void MEXTI2_VidSetCallBack(void (*PtrToFun)(void))
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <MEXTI2_VidSetCallBack+0x6>
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	9a 83       	std	Y+2, r25	; 0x02
    11ba:	89 83       	std	Y+1, r24	; 0x01
	CALLBACK=PtrToFun;
    11bc:	89 81       	ldd	r24, Y+1	; 0x01
    11be:	9a 81       	ldd	r25, Y+2	; 0x02
    11c0:	90 93 83 00 	sts	0x0083, r25
    11c4:	80 93 82 00 	sts	0x0082, r24
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <__vector_1>:
/*EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    11d2:	1f 92       	push	r1
    11d4:	0f 92       	push	r0
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	0f 92       	push	r0
    11da:	11 24       	eor	r1, r1
    11dc:	2f 93       	push	r18
    11de:	3f 93       	push	r19
    11e0:	4f 93       	push	r20
    11e2:	5f 93       	push	r21
    11e4:	6f 93       	push	r22
    11e6:	7f 93       	push	r23
    11e8:	8f 93       	push	r24
    11ea:	9f 93       	push	r25
    11ec:	af 93       	push	r26
    11ee:	bf 93       	push	r27
    11f0:	ef 93       	push	r30
    11f2:	ff 93       	push	r31
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    11fc:	e0 91 82 00 	lds	r30, 0x0082
    1200:	f0 91 83 00 	lds	r31, 0x0083
    1204:	09 95       	icall
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_2>:
/*EXTI 1 */
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    1256:	e0 91 82 00 	lds	r30, 0x0082
    125a:	f0 91 83 00 	lds	r31, 0x0083
    125e:	09 95       	icall
}
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_3>:
/*EXTI2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
    1290:	2f 93       	push	r18
    1292:	3f 93       	push	r19
    1294:	4f 93       	push	r20
    1296:	5f 93       	push	r21
    1298:	6f 93       	push	r22
    129a:	7f 93       	push	r23
    129c:	8f 93       	push	r24
    129e:	9f 93       	push	r25
    12a0:	af 93       	push	r26
    12a2:	bf 93       	push	r27
    12a4:	ef 93       	push	r30
    12a6:	ff 93       	push	r31
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	CALLBACK();
    12b0:	e0 91 82 00 	lds	r30, 0x0082
    12b4:	f0 91 83 00 	lds	r31, 0x0083
    12b8:	09 95       	icall
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <MDIO_Errorstate_SetPinDirection>:

/********* Set pin direction************/

ErrorState MDIO_Errorstate_SetPinDirection (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinDirection)

{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	28 97       	sbiw	r28, 0x08	; 8
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	6b 83       	std	Y+3, r22	; 0x03
    12f8:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	89 83       	std	Y+1, r24	; 0x01

	if (copy_uint8PinNumber<8)
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 30       	cpi	r24, 0x08	; 8
    1302:	08 f0       	brcs	.+2      	; 0x1306 <MDIO_Errorstate_SetPinDirection+0x26>
    1304:	f1 c0       	rjmp	.+482    	; 0x14e8 <MDIO_Errorstate_SetPinDirection+0x208>
	{
		if(copy_uint8PinDirection==PIN_OUTPUT)
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	09 f0       	breq	.+2      	; 0x130e <MDIO_Errorstate_SetPinDirection+0x2e>
    130c:	71 c0       	rjmp	.+226    	; 0x13f0 <MDIO_Errorstate_SetPinDirection+0x110>
		{
			switch(copy_uint8PortID)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	38 87       	std	Y+8, r19	; 0x08
    1316:	2f 83       	std	Y+7, r18	; 0x07
    1318:	8f 81       	ldd	r24, Y+7	; 0x07
    131a:	98 85       	ldd	r25, Y+8	; 0x08
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	49 f1       	breq	.+82     	; 0x1374 <MDIO_Errorstate_SetPinDirection+0x94>
    1322:	2f 81       	ldd	r18, Y+7	; 0x07
    1324:	38 85       	ldd	r19, Y+8	; 0x08
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <MDIO_Errorstate_SetPinDirection+0x56>
    132c:	8f 81       	ldd	r24, Y+7	; 0x07
    132e:	98 85       	ldd	r25, Y+8	; 0x08
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <MDIO_Errorstate_SetPinDirection+0x6c>
    1334:	5b c0       	rjmp	.+182    	; 0x13ec <MDIO_Errorstate_SetPinDirection+0x10c>
    1336:	2f 81       	ldd	r18, Y+7	; 0x07
    1338:	38 85       	ldd	r19, Y+8	; 0x08
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	71 f1       	breq	.+92     	; 0x139c <MDIO_Errorstate_SetPinDirection+0xbc>
    1340:	8f 81       	ldd	r24, Y+7	; 0x07
    1342:	98 85       	ldd	r25, Y+8	; 0x08
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	e9 f1       	breq	.+122    	; 0x13c4 <MDIO_Errorstate_SetPinDirection+0xe4>
    134a:	50 c0       	rjmp	.+160    	; 0x13ec <MDIO_Errorstate_SetPinDirection+0x10c>
			{
			case MDIO_PORTA:
				SET_BIT(DDRA,copy_uint8PinNumber);
    134c:	aa e3       	ldi	r26, 0x3A	; 58
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ea e3       	ldi	r30, 0x3A	; 58
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <MDIO_Errorstate_SetPinDirection+0x8a>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <MDIO_Errorstate_SetPinDirection+0x86>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	bb c0       	rjmp	.+374    	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				SET_BIT(DDRB,copy_uint8PinNumber);
    1374:	a7 e3       	ldi	r26, 0x37	; 55
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e7 e3       	ldi	r30, 0x37	; 55
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <MDIO_Errorstate_SetPinDirection+0xb2>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <MDIO_Errorstate_SetPinDirection+0xae>
    1396:	84 2b       	or	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	a7 c0       	rjmp	.+334    	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				SET_BIT(DDRC,copy_uint8PinNumber);
    139c:	a4 e3       	ldi	r26, 0x34	; 52
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e4 e3       	ldi	r30, 0x34	; 52
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <MDIO_Errorstate_SetPinDirection+0xda>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <MDIO_Errorstate_SetPinDirection+0xd6>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	93 c0       	rjmp	.+294    	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				SET_BIT(DDRD,copy_uint8PinNumber);
    13c4:	a1 e3       	ldi	r26, 0x31	; 49
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e1 e3       	ldi	r30, 0x31	; 49
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <MDIO_Errorstate_SetPinDirection+0x102>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <MDIO_Errorstate_SetPinDirection+0xfe>
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	7f c0       	rjmp	.+254    	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	7d c0       	rjmp	.+250    	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			}
		}

		else if(copy_uint8PinDirection==PIN_INPUT)
    13f0:	8c 81       	ldd	r24, Y+4	; 0x04
    13f2:	88 23       	and	r24, r24
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <MDIO_Errorstate_SetPinDirection+0x118>
    13f6:	76 c0       	rjmp	.+236    	; 0x14e4 <MDIO_Errorstate_SetPinDirection+0x204>
		{
			switch(copy_uint8PortID)
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	28 2f       	mov	r18, r24
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	3e 83       	std	Y+6, r19	; 0x06
    1400:	2d 83       	std	Y+5, r18	; 0x05
    1402:	8d 81       	ldd	r24, Y+5	; 0x05
    1404:	9e 81       	ldd	r25, Y+6	; 0x06
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	91 05       	cpc	r25, r1
    140a:	59 f1       	breq	.+86     	; 0x1462 <MDIO_Errorstate_SetPinDirection+0x182>
    140c:	2d 81       	ldd	r18, Y+5	; 0x05
    140e:	3e 81       	ldd	r19, Y+6	; 0x06
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	2c f4       	brge	.+10     	; 0x1420 <MDIO_Errorstate_SetPinDirection+0x140>
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	69 f0       	breq	.+26     	; 0x1438 <MDIO_Errorstate_SetPinDirection+0x158>
    141e:	60 c0       	rjmp	.+192    	; 0x14e0 <MDIO_Errorstate_SetPinDirection+0x200>
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	3e 81       	ldd	r19, Y+6	; 0x06
    1424:	22 30       	cpi	r18, 0x02	; 2
    1426:	31 05       	cpc	r19, r1
    1428:	89 f1       	breq	.+98     	; 0x148c <MDIO_Errorstate_SetPinDirection+0x1ac>
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	83 30       	cpi	r24, 0x03	; 3
    1430:	91 05       	cpc	r25, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <MDIO_Errorstate_SetPinDirection+0x156>
    1434:	40 c0       	rjmp	.+128    	; 0x14b6 <MDIO_Errorstate_SetPinDirection+0x1d6>
    1436:	54 c0       	rjmp	.+168    	; 0x14e0 <MDIO_Errorstate_SetPinDirection+0x200>
			{
			case MDIO_PORTA:
				CLR_BIT(DDRA,copy_uint8PinNumber);
    1438:	aa e3       	ldi	r26, 0x3A	; 58
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ea e3       	ldi	r30, 0x3A	; 58
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <MDIO_Errorstate_SetPinDirection+0x176>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <MDIO_Errorstate_SetPinDirection+0x172>
    145a:	80 95       	com	r24
    145c:	84 23       	and	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	44 c0       	rjmp	.+136    	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTB:
				CLR_BIT(DDRB,copy_uint8PinNumber);
    1462:	a7 e3       	ldi	r26, 0x37	; 55
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e7 e3       	ldi	r30, 0x37	; 55
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <MDIO_Errorstate_SetPinDirection+0x1a0>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <MDIO_Errorstate_SetPinDirection+0x19c>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	2f c0       	rjmp	.+94     	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTC:
				CLR_BIT(DDRC,copy_uint8PinNumber);
    148c:	a4 e3       	ldi	r26, 0x34	; 52
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e4 e3       	ldi	r30, 0x34	; 52
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <MDIO_Errorstate_SetPinDirection+0x1ca>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <MDIO_Errorstate_SetPinDirection+0x1c6>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	1a c0       	rjmp	.+52     	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			case MDIO_PORTD:
				CLR_BIT(DDRD,copy_uint8PinNumber);
    14b6:	a1 e3       	ldi	r26, 0x31	; 49
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e3       	ldi	r30, 0x31	; 49
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <MDIO_Errorstate_SetPinDirection+0x1f4>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <MDIO_Errorstate_SetPinDirection+0x1f0>
    14d8:	80 95       	com	r24
    14da:	84 23       	and	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	05 c0       	rjmp	.+10     	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
				break;
			default :
				loc_Errorstate_Error_state=NOK;
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	03 c0       	rjmp	.+6      	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    14e4:	19 82       	std	Y+1, r1	; 0x01
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <MDIO_Errorstate_SetPinDirection+0x20a>
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    14e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state ;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ec:	28 96       	adiw	r28, 0x08	; 8
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <MDIO_Errorstate_SetPinValue>:

/********* Set pin value************/
ErrorState MDIO_Errorstate_SetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 copy_uint8PinValue)
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	28 97       	sbiw	r28, 0x08	; 8
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	6b 83       	std	Y+3, r22	; 0x03
    1516:	4c 83       	std	Y+4, r20	; 0x04
	{
		ErrorState loc_Errorstate_Error_state = OK;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01

		if (copy_uint8PinNumber<8)
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 30       	cpi	r24, 0x08	; 8
    1520:	08 f0       	brcs	.+2      	; 0x1524 <MDIO_Errorstate_SetPinValue+0x26>
    1522:	f1 c0       	rjmp	.+482    	; 0x1706 <MDIO_Errorstate_SetPinValue+0x208>
		{
			if(copy_uint8PinValue==PIN_HIGH)
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	09 f0       	breq	.+2      	; 0x152c <MDIO_Errorstate_SetPinValue+0x2e>
    152a:	71 c0       	rjmp	.+226    	; 0x160e <MDIO_Errorstate_SetPinValue+0x110>
			{
				switch(copy_uint8PortID)
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	38 87       	std	Y+8, r19	; 0x08
    1534:	2f 83       	std	Y+7, r18	; 0x07
    1536:	8f 81       	ldd	r24, Y+7	; 0x07
    1538:	98 85       	ldd	r25, Y+8	; 0x08
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	91 05       	cpc	r25, r1
    153e:	49 f1       	breq	.+82     	; 0x1592 <MDIO_Errorstate_SetPinValue+0x94>
    1540:	2f 81       	ldd	r18, Y+7	; 0x07
    1542:	38 85       	ldd	r19, Y+8	; 0x08
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	2c f4       	brge	.+10     	; 0x1554 <MDIO_Errorstate_SetPinValue+0x56>
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	98 85       	ldd	r25, Y+8	; 0x08
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 f0       	breq	.+24     	; 0x156a <MDIO_Errorstate_SetPinValue+0x6c>
    1552:	5b c0       	rjmp	.+182    	; 0x160a <MDIO_Errorstate_SetPinValue+0x10c>
    1554:	2f 81       	ldd	r18, Y+7	; 0x07
    1556:	38 85       	ldd	r19, Y+8	; 0x08
    1558:	22 30       	cpi	r18, 0x02	; 2
    155a:	31 05       	cpc	r19, r1
    155c:	71 f1       	breq	.+92     	; 0x15ba <MDIO_Errorstate_SetPinValue+0xbc>
    155e:	8f 81       	ldd	r24, Y+7	; 0x07
    1560:	98 85       	ldd	r25, Y+8	; 0x08
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	e9 f1       	breq	.+122    	; 0x15e2 <MDIO_Errorstate_SetPinValue+0xe4>
    1568:	50 c0       	rjmp	.+160    	; 0x160a <MDIO_Errorstate_SetPinValue+0x10c>
				{
				case MDIO_PORTA:
					SET_BIT(PORTA,copy_uint8PinNumber);
    156a:	ab e3       	ldi	r26, 0x3B	; 59
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	eb e3       	ldi	r30, 0x3B	; 59
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <MDIO_Errorstate_SetPinValue+0x8a>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <MDIO_Errorstate_SetPinValue+0x86>
    158c:	84 2b       	or	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	bb c0       	rjmp	.+374    	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					SET_BIT(PORTB,copy_uint8PinNumber);
    1592:	a8 e3       	ldi	r26, 0x38	; 56
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	e8 e3       	ldi	r30, 0x38	; 56
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <MDIO_Errorstate_SetPinValue+0xb2>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <MDIO_Errorstate_SetPinValue+0xae>
    15b4:	84 2b       	or	r24, r20
    15b6:	8c 93       	st	X, r24
    15b8:	a7 c0       	rjmp	.+334    	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					SET_BIT(PORTC,copy_uint8PinNumber);
    15ba:	a5 e3       	ldi	r26, 0x35	; 53
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e5 e3       	ldi	r30, 0x35	; 53
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	48 2f       	mov	r20, r24
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <MDIO_Errorstate_SetPinValue+0xda>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <MDIO_Errorstate_SetPinValue+0xd6>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	93 c0       	rjmp	.+294    	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					SET_BIT(PORTD,copy_uint8PinNumber);
    15e2:	a2 e3       	ldi	r26, 0x32	; 50
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e2 e3       	ldi	r30, 0x32	; 50
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	48 2f       	mov	r20, r24
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	02 2e       	mov	r0, r18
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <MDIO_Errorstate_SetPinValue+0x102>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <MDIO_Errorstate_SetPinValue+0xfe>
    1604:	84 2b       	or	r24, r20
    1606:	8c 93       	st	X, r24
    1608:	7f c0       	rjmp	.+254    	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    160a:	19 82       	std	Y+1, r1	; 0x01
    160c:	7d c0       	rjmp	.+250    	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>

					break;
				}
			}

			else if(copy_uint8PinValue==PIN_LOW)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	88 23       	and	r24, r24
    1612:	09 f0       	breq	.+2      	; 0x1616 <MDIO_Errorstate_SetPinValue+0x118>
    1614:	76 c0       	rjmp	.+236    	; 0x1702 <MDIO_Errorstate_SetPinValue+0x204>
			{
				switch(copy_uint8PortID)
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3e 83       	std	Y+6, r19	; 0x06
    161e:	2d 83       	std	Y+5, r18	; 0x05
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	59 f1       	breq	.+86     	; 0x1680 <MDIO_Errorstate_SetPinValue+0x182>
    162a:	2d 81       	ldd	r18, Y+5	; 0x05
    162c:	3e 81       	ldd	r19, Y+6	; 0x06
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <MDIO_Errorstate_SetPinValue+0x140>
    1634:	8d 81       	ldd	r24, Y+5	; 0x05
    1636:	9e 81       	ldd	r25, Y+6	; 0x06
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f0       	breq	.+26     	; 0x1656 <MDIO_Errorstate_SetPinValue+0x158>
    163c:	60 c0       	rjmp	.+192    	; 0x16fe <MDIO_Errorstate_SetPinValue+0x200>
    163e:	2d 81       	ldd	r18, Y+5	; 0x05
    1640:	3e 81       	ldd	r19, Y+6	; 0x06
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	89 f1       	breq	.+98     	; 0x16aa <MDIO_Errorstate_SetPinValue+0x1ac>
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <MDIO_Errorstate_SetPinValue+0x156>
    1652:	40 c0       	rjmp	.+128    	; 0x16d4 <MDIO_Errorstate_SetPinValue+0x1d6>
    1654:	54 c0       	rjmp	.+168    	; 0x16fe <MDIO_Errorstate_SetPinValue+0x200>
				{
				case MDIO_PORTA:
					CLR_BIT(PORTA,copy_uint8PinNumber);
    1656:	ab e3       	ldi	r26, 0x3B	; 59
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	eb e3       	ldi	r30, 0x3B	; 59
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <MDIO_Errorstate_SetPinValue+0x176>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <MDIO_Errorstate_SetPinValue+0x172>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	44 c0       	rjmp	.+136    	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTB:
					CLR_BIT(PORTB,copy_uint8PinNumber);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <MDIO_Errorstate_SetPinValue+0x1a0>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <MDIO_Errorstate_SetPinValue+0x19c>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	2f c0       	rjmp	.+94     	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTC:
					CLR_BIT(PORTC,copy_uint8PinNumber);
    16aa:	a5 e3       	ldi	r26, 0x35	; 53
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e3       	ldi	r30, 0x35	; 53
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <MDIO_Errorstate_SetPinValue+0x1ca>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <MDIO_Errorstate_SetPinValue+0x1c6>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	1a c0       	rjmp	.+52     	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				case MDIO_PORTD:
					CLR_BIT(PORTD,copy_uint8PinNumber);
    16d4:	a2 e3       	ldi	r26, 0x32	; 50
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e2 e3       	ldi	r30, 0x32	; 50
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <MDIO_Errorstate_SetPinValue+0x1f4>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <MDIO_Errorstate_SetPinValue+0x1f0>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	05 c0       	rjmp	.+10     	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
					break;
				default :
					loc_Errorstate_Error_state=NOK;
    16fe:	19 82       	std	Y+1, r1	; 0x01
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
				}
			}
			else
			{
				loc_Errorstate_Error_state=NOK;
    1702:	19 82       	std	Y+1, r1	; 0x01
    1704:	01 c0       	rjmp	.+2      	; 0x1708 <MDIO_Errorstate_SetPinValue+0x20a>
			}
		}
		else
		{
			loc_Errorstate_Error_state=NOK;
    1706:	19 82       	std	Y+1, r1	; 0x01
		}
		return loc_Errorstate_Error_state ;
    1708:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    170a:	28 96       	adiw	r28, 0x08	; 8
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <MDIO_Errorstate_GetPinValue>:


/********* get pin value************/
ErrorState MDIO_Errorstate_GetPinValue (uint8 copy_uint8PortID , uint8 copy_uint8PinNumber,uint8 *puint8PinValue)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	27 97       	sbiw	r28, 0x07	; 7
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	8a 83       	std	Y+2, r24	; 0x02
    1732:	6b 83       	std	Y+3, r22	; 0x03
    1734:	5d 83       	std	Y+5, r21	; 0x05
    1736:	4c 83       	std	Y+4, r20	; 0x04
	ErrorState loc_Errorstate_Error_state = OK;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
	if (copy_uint8PinNumber<8)
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 30       	cpi	r24, 0x08	; 8
    1740:	08 f0       	brcs	.+2      	; 0x1744 <MDIO_Errorstate_GetPinValue+0x28>
    1742:	73 c0       	rjmp	.+230    	; 0x182a <MDIO_Errorstate_GetPinValue+0x10e>
	{
		switch(copy_uint8PortID)
    1744:	8a 81       	ldd	r24, Y+2	; 0x02
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	3f 83       	std	Y+7, r19	; 0x07
    174c:	2e 83       	std	Y+6, r18	; 0x06
    174e:	4e 81       	ldd	r20, Y+6	; 0x06
    1750:	5f 81       	ldd	r21, Y+7	; 0x07
    1752:	41 30       	cpi	r20, 0x01	; 1
    1754:	51 05       	cpc	r21, r1
    1756:	59 f1       	breq	.+86     	; 0x17ae <MDIO_Errorstate_GetPinValue+0x92>
    1758:	8e 81       	ldd	r24, Y+6	; 0x06
    175a:	9f 81       	ldd	r25, Y+7	; 0x07
    175c:	82 30       	cpi	r24, 0x02	; 2
    175e:	91 05       	cpc	r25, r1
    1760:	34 f4       	brge	.+12     	; 0x176e <MDIO_Errorstate_GetPinValue+0x52>
    1762:	2e 81       	ldd	r18, Y+6	; 0x06
    1764:	3f 81       	ldd	r19, Y+7	; 0x07
    1766:	21 15       	cp	r18, r1
    1768:	31 05       	cpc	r19, r1
    176a:	69 f0       	breq	.+26     	; 0x1786 <MDIO_Errorstate_GetPinValue+0x6a>
    176c:	5c c0       	rjmp	.+184    	; 0x1826 <MDIO_Errorstate_GetPinValue+0x10a>
    176e:	4e 81       	ldd	r20, Y+6	; 0x06
    1770:	5f 81       	ldd	r21, Y+7	; 0x07
    1772:	42 30       	cpi	r20, 0x02	; 2
    1774:	51 05       	cpc	r21, r1
    1776:	79 f1       	breq	.+94     	; 0x17d6 <MDIO_Errorstate_GetPinValue+0xba>
    1778:	8e 81       	ldd	r24, Y+6	; 0x06
    177a:	9f 81       	ldd	r25, Y+7	; 0x07
    177c:	83 30       	cpi	r24, 0x03	; 3
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <MDIO_Errorstate_GetPinValue+0x68>
    1782:	3d c0       	rjmp	.+122    	; 0x17fe <MDIO_Errorstate_GetPinValue+0xe2>
    1784:	50 c0       	rjmp	.+160    	; 0x1826 <MDIO_Errorstate_GetPinValue+0x10a>
		{
		case MDIO_PORTA:
			*puint8PinValue= GET_BIT(PINA,copy_uint8PinNumber);
    1786:	e9 e3       	ldi	r30, 0x39	; 57
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	a9 01       	movw	r20, r18
    1798:	02 c0       	rjmp	.+4      	; 0x179e <MDIO_Errorstate_GetPinValue+0x82>
    179a:	55 95       	asr	r21
    179c:	47 95       	ror	r20
    179e:	8a 95       	dec	r24
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <MDIO_Errorstate_GetPinValue+0x7e>
    17a2:	ca 01       	movw	r24, r20
    17a4:	81 70       	andi	r24, 0x01	; 1
    17a6:	ec 81       	ldd	r30, Y+4	; 0x04
    17a8:	fd 81       	ldd	r31, Y+5	; 0x05
    17aa:	80 83       	st	Z, r24
    17ac:	3f c0       	rjmp	.+126    	; 0x182c <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTB:
			*puint8PinValue=GET_BIT(PINB,copy_uint8PinNumber);
    17ae:	e6 e3       	ldi	r30, 0x36	; 54
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <MDIO_Errorstate_GetPinValue+0xaa>
    17c2:	55 95       	asr	r21
    17c4:	47 95       	ror	r20
    17c6:	8a 95       	dec	r24
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <MDIO_Errorstate_GetPinValue+0xa6>
    17ca:	ca 01       	movw	r24, r20
    17cc:	81 70       	andi	r24, 0x01	; 1
    17ce:	ec 81       	ldd	r30, Y+4	; 0x04
    17d0:	fd 81       	ldd	r31, Y+5	; 0x05
    17d2:	80 83       	st	Z, r24
    17d4:	2b c0       	rjmp	.+86     	; 0x182c <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTC:
			*puint8PinValue=GET_BIT(PINC,copy_uint8PinNumber);
    17d6:	e3 e3       	ldi	r30, 0x33	; 51
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <MDIO_Errorstate_GetPinValue+0xd2>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <MDIO_Errorstate_GetPinValue+0xce>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	ec 81       	ldd	r30, Y+4	; 0x04
    17f8:	fd 81       	ldd	r31, Y+5	; 0x05
    17fa:	80 83       	st	Z, r24
    17fc:	17 c0       	rjmp	.+46     	; 0x182c <MDIO_Errorstate_GetPinValue+0x110>
			break;
		case MDIO_PORTD:
			*puint8PinValue=GET_BIT(PIND,copy_uint8PinNumber);
    17fe:	e0 e3       	ldi	r30, 0x30	; 48
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	88 2f       	mov	r24, r24
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	a9 01       	movw	r20, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <MDIO_Errorstate_GetPinValue+0xfa>
    1812:	55 95       	asr	r21
    1814:	47 95       	ror	r20
    1816:	8a 95       	dec	r24
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <MDIO_Errorstate_GetPinValue+0xf6>
    181a:	ca 01       	movw	r24, r20
    181c:	81 70       	andi	r24, 0x01	; 1
    181e:	ec 81       	ldd	r30, Y+4	; 0x04
    1820:	fd 81       	ldd	r31, Y+5	; 0x05
    1822:	80 83       	st	Z, r24
    1824:	03 c0       	rjmp	.+6      	; 0x182c <MDIO_Errorstate_GetPinValue+0x110>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    1826:	19 82       	std	Y+1, r1	; 0x01
    1828:	01 c0       	rjmp	.+2      	; 0x182c <MDIO_Errorstate_GetPinValue+0x110>

		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    182a:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    182c:	89 81       	ldd	r24, Y+1	; 0x01
}
    182e:	27 96       	adiw	r28, 0x07	; 7
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <MDIO_Errorstate_SetPortDirection>:

/********* set port direction & value************/
ErrorState MDIO_Errorstate_SetPortDirection (uint8 copy_uint8PortID , uint8 copy_uint8PortDirection)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <MDIO_Errorstate_SetPortDirection+0x6>
    1846:	00 d0       	rcall	.+0      	; 0x1848 <MDIO_Errorstate_SetPortDirection+0x8>
    1848:	0f 92       	push	r0
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	8a 83       	std	Y+2, r24	; 0x02
    1850:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	89 83       	std	Y+1, r24	; 0x01

	if((copy_uint8PortDirection== PORT_OUTPUT) ||(copy_uint8PortDirection==PORT_INPUT))
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	8f 3f       	cpi	r24, 0xFF	; 255
    185a:	19 f0       	breq	.+6      	; 0x1862 <MDIO_Errorstate_SetPortDirection+0x22>
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	88 23       	and	r24, r24
    1860:	a9 f5       	brne	.+106    	; 0x18cc <MDIO_Errorstate_SetPortDirection+0x8c>
	{
		switch(copy_uint8PortID)
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	3d 83       	std	Y+5, r19	; 0x05
    186a:	2c 83       	std	Y+4, r18	; 0x04
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	9d 81       	ldd	r25, Y+5	; 0x05
    1870:	81 30       	cpi	r24, 0x01	; 1
    1872:	91 05       	cpc	r25, r1
    1874:	d1 f0       	breq	.+52     	; 0x18aa <MDIO_Errorstate_SetPortDirection+0x6a>
    1876:	2c 81       	ldd	r18, Y+4	; 0x04
    1878:	3d 81       	ldd	r19, Y+5	; 0x05
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	2c f4       	brge	.+10     	; 0x188a <MDIO_Errorstate_SetPortDirection+0x4a>
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	9d 81       	ldd	r25, Y+5	; 0x05
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	61 f0       	breq	.+24     	; 0x18a0 <MDIO_Errorstate_SetPortDirection+0x60>
    1888:	1f c0       	rjmp	.+62     	; 0x18c8 <MDIO_Errorstate_SetPortDirection+0x88>
    188a:	2c 81       	ldd	r18, Y+4	; 0x04
    188c:	3d 81       	ldd	r19, Y+5	; 0x05
    188e:	22 30       	cpi	r18, 0x02	; 2
    1890:	31 05       	cpc	r19, r1
    1892:	81 f0       	breq	.+32     	; 0x18b4 <MDIO_Errorstate_SetPortDirection+0x74>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	81 f0       	breq	.+32     	; 0x18be <MDIO_Errorstate_SetPortDirection+0x7e>
    189e:	14 c0       	rjmp	.+40     	; 0x18c8 <MDIO_Errorstate_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortDirection;
    18a0:	ea e3       	ldi	r30, 0x3A	; 58
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	80 83       	st	Z, r24
    18a8:	12 c0       	rjmp	.+36     	; 0x18ce <MDIO_Errorstate_SetPortDirection+0x8e>

			break;
		case MDIO_PORTB:
			DDRB=copy_uint8PortDirection;
    18aa:	e7 e3       	ldi	r30, 0x37	; 55
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	80 83       	st	Z, r24
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=copy_uint8PortDirection;
    18b4:	e4 e3       	ldi	r30, 0x34	; 52
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	80 83       	st	Z, r24
    18bc:	08 c0       	rjmp	.+16     	; 0x18ce <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=copy_uint8PortDirection;
    18be:	e1 e3       	ldi	r30, 0x31	; 49
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	80 83       	st	Z, r24
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    18c8:	19 82       	std	Y+1, r1	; 0x01
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <MDIO_Errorstate_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		loc_Errorstate_Error_state=NOK;
    18cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return loc_Errorstate_Error_state;
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	cf 91       	pop	r28
    18dc:	df 91       	pop	r29
    18de:	08 95       	ret

000018e0 <MDIO_Errorstate_SetPortValue>:

/*************** set port value ***********/
ErrorState MDIO_Errorstate_SetPortValue (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    18e0:	df 93       	push	r29
    18e2:	cf 93       	push	r28
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <MDIO_Errorstate_SetPortValue+0x6>
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <MDIO_Errorstate_SetPortValue+0x8>
    18e8:	0f 92       	push	r0
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState loc_Errorstate_Error_state = OK;
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	89 83       	std	Y+1, r24	; 0x01

	if(copy_uint8PortValue<=PORT_HIGH)
	{
		switch(copy_uint8PortID)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3d 83       	std	Y+5, r19	; 0x05
    18fe:	2c 83       	std	Y+4, r18	; 0x04
    1900:	8c 81       	ldd	r24, Y+4	; 0x04
    1902:	9d 81       	ldd	r25, Y+5	; 0x05
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	91 05       	cpc	r25, r1
    1908:	d1 f0       	breq	.+52     	; 0x193e <MDIO_Errorstate_SetPortValue+0x5e>
    190a:	2c 81       	ldd	r18, Y+4	; 0x04
    190c:	3d 81       	ldd	r19, Y+5	; 0x05
    190e:	22 30       	cpi	r18, 0x02	; 2
    1910:	31 05       	cpc	r19, r1
    1912:	2c f4       	brge	.+10     	; 0x191e <MDIO_Errorstate_SetPortValue+0x3e>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	61 f0       	breq	.+24     	; 0x1934 <MDIO_Errorstate_SetPortValue+0x54>
    191c:	1f c0       	rjmp	.+62     	; 0x195c <MDIO_Errorstate_SetPortValue+0x7c>
    191e:	2c 81       	ldd	r18, Y+4	; 0x04
    1920:	3d 81       	ldd	r19, Y+5	; 0x05
    1922:	22 30       	cpi	r18, 0x02	; 2
    1924:	31 05       	cpc	r19, r1
    1926:	81 f0       	breq	.+32     	; 0x1948 <MDIO_Errorstate_SetPortValue+0x68>
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	91 05       	cpc	r25, r1
    1930:	81 f0       	breq	.+32     	; 0x1952 <MDIO_Errorstate_SetPortValue+0x72>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <MDIO_Errorstate_SetPortValue+0x7c>
		{
		case MDIO_PORTA:
			DDRA=copy_uint8PortValue;
    1934:	ea e3       	ldi	r30, 0x3A	; 58
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	80 83       	st	Z, r24
    193c:	10 c0       	rjmp	.+32     	; 0x195e <MDIO_Errorstate_SetPortValue+0x7e>

			break;
		case MDIO_PORTB:
			PORTB=copy_uint8PortValue;
    193e:	e8 e3       	ldi	r30, 0x38	; 56
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	80 83       	st	Z, r24
    1946:	0b c0       	rjmp	.+22     	; 0x195e <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTC:
			PORTC=copy_uint8PortValue;
    1948:	e5 e3       	ldi	r30, 0x35	; 53
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	80 83       	st	Z, r24
    1950:	06 c0       	rjmp	.+12     	; 0x195e <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		case MDIO_PORTD:
			PORTD=copy_uint8PortValue;
    1952:	e2 e3       	ldi	r30, 0x32	; 50
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	80 83       	st	Z, r24
    195a:	01 c0       	rjmp	.+2      	; 0x195e <MDIO_Errorstate_SetPortValue+0x7e>
			break;
		default :
			loc_Errorstate_Error_state=NOK;
    195c:	19 82       	std	Y+1, r1	; 0x01
	}
		else
		{
			loc_Errorstate_Error_state=NOK;
		}
		return loc_Errorstate_Error_state;
    195e:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <MDIO_Errorstate_Set4MostBits>:

ErrorState MDIO_Errorstate_Set4MostBits (uint8 copy_uint8PortID ,uint8 copy_uint8PortValue)
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	00 d0       	rcall	.+0      	; 0x1976 <MDIO_Errorstate_Set4MostBits+0x6>
    1976:	00 d0       	rcall	.+0      	; 0x1978 <MDIO_Errorstate_Set4MostBits+0x8>
    1978:	0f 92       	push	r0
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	6b 83       	std	Y+3, r22	; 0x03
	ErrorState Loc_Errorstate_Error_state = OK;
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_uint8PortID)
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	3d 83       	std	Y+5, r19	; 0x05
    198e:	2c 83       	std	Y+4, r18	; 0x04
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	91 05       	cpc	r25, r1
    1998:	29 f1       	breq	.+74     	; 0x19e4 <MDIO_Errorstate_Set4MostBits+0x74>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	2c f4       	brge	.+10     	; 0x19ae <MDIO_Errorstate_Set4MostBits+0x3e>
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	9d 81       	ldd	r25, Y+5	; 0x05
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	61 f0       	breq	.+24     	; 0x19c4 <MDIO_Errorstate_Set4MostBits+0x54>
    19ac:	4b c0       	rjmp	.+150    	; 0x1a44 <MDIO_Errorstate_Set4MostBits+0xd4>
    19ae:	2c 81       	ldd	r18, Y+4	; 0x04
    19b0:	3d 81       	ldd	r19, Y+5	; 0x05
    19b2:	22 30       	cpi	r18, 0x02	; 2
    19b4:	31 05       	cpc	r19, r1
    19b6:	31 f1       	breq	.+76     	; 0x1a04 <MDIO_Errorstate_Set4MostBits+0x94>
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	9d 81       	ldd	r25, Y+5	; 0x05
    19bc:	83 30       	cpi	r24, 0x03	; 3
    19be:	91 05       	cpc	r25, r1
    19c0:	89 f1       	breq	.+98     	; 0x1a24 <MDIO_Errorstate_Set4MostBits+0xb4>
    19c2:	40 c0       	rjmp	.+128    	; 0x1a44 <MDIO_Errorstate_Set4MostBits+0xd4>
			{
			case MDIO_PORTA:
				PORTA&=0x0F;
    19c4:	ab e3       	ldi	r26, 0x3B	; 59
    19c6:	b0 e0       	ldi	r27, 0x00	; 0
    19c8:	eb e3       	ldi	r30, 0x3B	; 59
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	8f 70       	andi	r24, 0x0F	; 15
    19d0:	8c 93       	st	X, r24
				PORTA|=copy_uint8PortValue;
    19d2:	ab e3       	ldi	r26, 0x3B	; 59
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	eb e3       	ldi	r30, 0x3B	; 59
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	90 81       	ld	r25, Z
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	89 2b       	or	r24, r25
    19e0:	8c 93       	st	X, r24
    19e2:	31 c0       	rjmp	.+98     	; 0x1a46 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTB:
				PORTB&=0x0F;
    19e4:	a8 e3       	ldi	r26, 0x38	; 56
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e8 e3       	ldi	r30, 0x38	; 56
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8f 70       	andi	r24, 0x0F	; 15
    19f0:	8c 93       	st	X, r24
				PORTB|=copy_uint8PortValue;
    19f2:	a8 e3       	ldi	r26, 0x38	; 56
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e8 e3       	ldi	r30, 0x38	; 56
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	90 81       	ld	r25, Z
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	89 2b       	or	r24, r25
    1a00:	8c 93       	st	X, r24
    1a02:	21 c0       	rjmp	.+66     	; 0x1a46 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTC:
				PORTC&=0x0F;
    1a04:	a5 e3       	ldi	r26, 0x35	; 53
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e5 e3       	ldi	r30, 0x35	; 53
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	8c 93       	st	X, r24
				PORTC|=copy_uint8PortValue;
    1a12:	a5 e3       	ldi	r26, 0x35	; 53
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e3       	ldi	r30, 0x35	; 53
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	90 81       	ld	r25, Z
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	89 2b       	or	r24, r25
    1a20:	8c 93       	st	X, r24
    1a22:	11 c0       	rjmp	.+34     	; 0x1a46 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			case MDIO_PORTD:
				PORTD&=0x0F;
    1a24:	a2 e3       	ldi	r26, 0x32	; 50
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	e2 e3       	ldi	r30, 0x32	; 50
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 70       	andi	r24, 0x0F	; 15
    1a30:	8c 93       	st	X, r24
				PORTD|=copy_uint8PortValue;
    1a32:	a2 e3       	ldi	r26, 0x32	; 50
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e2 e3       	ldi	r30, 0x32	; 50
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	90 81       	ld	r25, Z
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	89 2b       	or	r24, r25
    1a40:	8c 93       	st	X, r24
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <MDIO_Errorstate_Set4MostBits+0xd6>
				break;
			default :
				Loc_Errorstate_Error_state=NOK;
    1a44:	19 82       	std	Y+1, r1	; 0x01
				break;
			}
	return Loc_Errorstate_Error_state;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	0f 90       	pop	r0
    1a52:	cf 91       	pop	r28
    1a54:	df 91       	pop	r29
    1a56:	08 95       	ret

00001a58 <HAL_VidHCLCD_4BitModeWriteCommand>:
#include"HCLCD_Config.h"
#define F_CPU   16000000UL
#include"util/delay.h"

void HAL_VidHCLCD_4BitModeWriteCommand(uint8 Copy_uint8Command)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	2f 97       	sbiw	r28, 0x0f	; 15
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
	/*Select Command Register-->LOW*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_LOW);
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
	/*Send Command*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,Copy_uint8Command);
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a86:	0e 94 b8 0c 	call	0x1970	; 0x1970 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	63 e0       	ldi	r22, 0x03	; 3
    1a8e:	41 e0       	ldi	r20, 0x01	; 1
    1a90:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e0       	ldi	r26, 0x00	; 0
    1a9a:	b0 e4       	ldi	r27, 0x40	; 64
    1a9c:	8b 87       	std	Y+11, r24	; 0x0b
    1a9e:	9c 87       	std	Y+12, r25	; 0x0c
    1aa0:	ad 87       	std	Y+13, r26	; 0x0d
    1aa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a e7       	ldi	r20, 0x7A	; 122
    1ab2:	55 e4       	ldi	r21, 0x45	; 69
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8f 83       	std	Y+7, r24	; 0x07
    1abe:	98 87       	std	Y+8, r25	; 0x08
    1ac0:	a9 87       	std	Y+9, r26	; 0x09
    1ac2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <HAL_VidHCLCD_4BitModeWriteCommand+0x8e>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <HAL_VidHCLCD_4BitModeWriteCommand+0x10c>
	else if (__tmp > 65535)
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <HAL_VidHCLCD_4BitModeWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <HAL_VidHCLCD_4BitModeWriteCommand+0xee>
    1b28:	80 e9       	ldi	r24, 0x90	; 144
    1b2a:	91 e0       	ldi	r25, 0x01	; 1
    1b2c:	9c 83       	std	Y+4, r25	; 0x04
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <HAL_VidHCLCD_4BitModeWriteCommand+0xdc>
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <HAL_VidHCLCD_4BitModeWriteCommand+0xd0>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <HAL_VidHCLCD_4BitModeWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <HAL_VidHCLCD_4BitModeWriteCommand+0x118>
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	63 e0       	ldi	r22, 0x03	; 3
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
}
    1b82:	2f 96       	adiw	r28, 0x0f	; 15
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	08 95       	ret

00001b94 <HAL_VidHCLCD_4BitModeWriteChar>:
void HAL_VidHCLCD_4BitModeWriteChar(uint8 Copy_uint8Char)
{
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	6d 97       	sbiw	r28, 0x1d	; 29
    1b9e:	0f b6       	in	r0, 0x3f	; 63
    1ba0:	f8 94       	cli
    1ba2:	de bf       	out	0x3e, r29	; 62
    1ba4:	0f be       	out	0x3f, r0	; 63
    1ba6:	cd bf       	out	0x3d, r28	; 61
    1ba8:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Select Data Register-->HIGH*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RS_PIN,PIN_HIGH);
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	61 e0       	ldi	r22, 0x01	; 1
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
	/*Select Write Mode*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,RW_PIN,PIN_LOW);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	62 e0       	ldi	r22, 0x02	; 2
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
	/*Send 4 Most Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char&0xF0));
    1bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	90 7f       	andi	r25, 0xF0	; 240
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	69 2f       	mov	r22, r25
    1bc8:	0e 94 b8 0c 	call	0x1970	; 0x1970 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	63 e0       	ldi	r22, 0x03	; 3
    1bd0:	41 e0       	ldi	r20, 0x01	; 1
    1bd2:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	a0 e0       	ldi	r26, 0x00	; 0
    1bdc:	b0 e4       	ldi	r27, 0x40	; 64
    1bde:	89 8f       	std	Y+25, r24	; 0x19
    1be0:	9a 8f       	std	Y+26, r25	; 0x1a
    1be2:	ab 8f       	std	Y+27, r26	; 0x1b
    1be4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a e7       	ldi	r20, 0x7A	; 122
    1bf4:	55 e4       	ldi	r21, 0x45	; 69
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8d 8b       	std	Y+21, r24	; 0x15
    1c00:	9e 8b       	std	Y+22, r25	; 0x16
    1c02:	af 8b       	std	Y+23, r26	; 0x17
    1c04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <HAL_VidHCLCD_4BitModeWriteChar+0x94>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <HAL_VidHCLCD_4BitModeWriteChar+0x112>
	else if (__tmp > 65535)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <HAL_VidHCLCD_4BitModeWriteChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9c 8b       	std	Y+20, r25	; 0x14
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <HAL_VidHCLCD_4BitModeWriteChar+0xf4>
    1c6a:	80 e9       	ldi	r24, 0x90	; 144
    1c6c:	91 e0       	ldi	r25, 0x01	; 1
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	89 8b       	std	Y+17, r24	; 0x11
    1c72:	89 89       	ldd	r24, Y+17	; 0x11
    1c74:	9a 89       	ldd	r25, Y+18	; 0x12
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <HAL_VidHCLCD_4BitModeWriteChar+0xe2>
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <HAL_VidHCLCD_4BitModeWriteChar+0xd6>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <HAL_VidHCLCD_4BitModeWriteChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9c 8b       	std	Y+20, r25	; 0x14
    1ca4:	8b 8b       	std	Y+19, r24	; 0x13
    1ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	98 89       	ldd	r25, Y+16	; 0x10
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <HAL_VidHCLCD_4BitModeWriteChar+0x11e>
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	63 e0       	ldi	r22, 0x03	; 3
    1cbe:	40 e0       	ldi	r20, 0x00	; 0
    1cc0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
	/*Send 4 Least Bits of Data*/
	MDIO_Errorstate_Set4MostBits(HCLCD_DataPort,(Copy_uint8Char<<4));
    1cc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	92 95       	swap	r25
    1cca:	90 7f       	andi	r25, 0xF0	; 240
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	69 2f       	mov	r22, r25
    1cd0:	0e 94 b8 0c 	call	0x1970	; 0x1970 <MDIO_Errorstate_Set4MostBits>
	/*LCD Enable*/
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_HIGH);
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	63 e0       	ldi	r22, 0x03	; 3
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	b0 e4       	ldi	r27, 0x40	; 64
    1ce6:	8b 87       	std	Y+11, r24	; 0x0b
    1ce8:	9c 87       	std	Y+12, r25	; 0x0c
    1cea:	ad 87       	std	Y+13, r26	; 0x0d
    1cec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a e7       	ldi	r20, 0x7A	; 122
    1cfc:	55 e4       	ldi	r21, 0x45	; 69
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	8f 83       	std	Y+7, r24	; 0x07
    1d08:	98 87       	std	Y+8, r25	; 0x08
    1d0a:	a9 87       	std	Y+9, r26	; 0x09
    1d0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d10:	78 85       	ldd	r23, Y+8	; 0x08
    1d12:	89 85       	ldd	r24, Y+9	; 0x09
    1d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <HAL_VidHCLCD_4BitModeWriteChar+0x19c>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <HAL_VidHCLCD_4BitModeWriteChar+0x21a>
	else if (__tmp > 65535)
    1d30:	6f 81       	ldd	r22, Y+7	; 0x07
    1d32:	78 85       	ldd	r23, Y+8	; 0x08
    1d34:	89 85       	ldd	r24, Y+9	; 0x09
    1d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <HAL_VidHCLCD_4BitModeWriteChar+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9e 83       	std	Y+6, r25	; 0x06
    1d6e:	8d 83       	std	Y+5, r24	; 0x05
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <HAL_VidHCLCD_4BitModeWriteChar+0x1fc>
    1d72:	80 e9       	ldi	r24, 0x90	; 144
    1d74:	91 e0       	ldi	r25, 0x01	; 1
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <HAL_VidHCLCD_4BitModeWriteChar+0x1ea>
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <HAL_VidHCLCD_4BitModeWriteChar+0x1de>
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <HAL_VidHCLCD_4BitModeWriteChar+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d9c:	78 85       	ldd	r23, Y+8	; 0x08
    1d9e:	89 85       	ldd	r24, Y+9	; 0x09
    1da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9e 83       	std	Y+6, r25	; 0x06
    1dac:	8d 83       	std	Y+5, r24	; 0x05
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <HAL_VidHCLCD_4BitModeWriteChar+0x226>
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Errorstate_SetPinValue(HCLCD_ControlPort,E_PIN,PIN_LOW);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	63 e0       	ldi	r22, 0x03	; 3
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
}
    1dcc:	6d 96       	adiw	r28, 0x1d	; 29
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <HAL_VidHCLCD_4BitModeInit>:
void HAL_VidHCLCD_4BitModeInit(void)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	e8 97       	sbiw	r28, 0x38	; 56
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 ef       	ldi	r26, 0xF0	; 240
    1df8:	b1 e4       	ldi	r27, 0x41	; 65
    1dfa:	8d ab       	std	Y+53, r24	; 0x35
    1dfc:	9e ab       	std	Y+54, r25	; 0x36
    1dfe:	af ab       	std	Y+55, r26	; 0x37
    1e00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	6d a9       	ldd	r22, Y+53	; 0x35
    1e04:	7e a9       	ldd	r23, Y+54	; 0x36
    1e06:	8f a9       	ldd	r24, Y+55	; 0x37
    1e08:	98 ad       	ldd	r25, Y+56	; 0x38
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	55 e4       	ldi	r21, 0x45	; 69
    1e12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	89 ab       	std	Y+49, r24	; 0x31
    1e1c:	9a ab       	std	Y+50, r25	; 0x32
    1e1e:	ab ab       	std	Y+51, r26	; 0x33
    1e20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e22:	69 a9       	ldd	r22, Y+49	; 0x31
    1e24:	7a a9       	ldd	r23, Y+50	; 0x32
    1e26:	8b a9       	ldd	r24, Y+51	; 0x33
    1e28:	9c a9       	ldd	r25, Y+52	; 0x34
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <HAL_VidHCLCD_4BitModeInit+0x66>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	98 ab       	std	Y+48, r25	; 0x30
    1e40:	8f a7       	std	Y+47, r24	; 0x2f
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <HAL_VidHCLCD_4BitModeInit+0xe4>
	else if (__tmp > 65535)
    1e44:	69 a9       	ldd	r22, Y+49	; 0x31
    1e46:	7a a9       	ldd	r23, Y+50	; 0x32
    1e48:	8b a9       	ldd	r24, Y+51	; 0x33
    1e4a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	4c f5       	brge	.+82     	; 0x1eae <HAL_VidHCLCD_4BitModeInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1e5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1e60:	8f a9       	ldd	r24, Y+55	; 0x37
    1e62:	98 ad       	ldd	r25, Y+56	; 0x38
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	98 ab       	std	Y+48, r25	; 0x30
    1e82:	8f a7       	std	Y+47, r24	; 0x2f
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <HAL_VidHCLCD_4BitModeInit+0xc6>
    1e86:	80 e9       	ldi	r24, 0x90	; 144
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	9e a7       	std	Y+46, r25	; 0x2e
    1e8c:	8d a7       	std	Y+45, r24	; 0x2d
    1e8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e90:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <HAL_VidHCLCD_4BitModeInit+0xb4>
    1e96:	9e a7       	std	Y+46, r25	; 0x2e
    1e98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	98 ab       	std	Y+48, r25	; 0x30
    1ea2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <HAL_VidHCLCD_4BitModeInit+0xa8>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <HAL_VidHCLCD_4BitModeInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1eb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	98 ab       	std	Y+48, r25	; 0x30
    1ec0:	8f a7       	std	Y+47, r24	; 0x2f
    1ec2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ec4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ec6:	9c a7       	std	Y+44, r25	; 0x2c
    1ec8:	8b a7       	std	Y+43, r24	; 0x2b
    1eca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ecc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <HAL_VidHCLCD_4BitModeInit+0xf0>
    1ed2:	9c a7       	std	Y+44, r25	; 0x2c
    1ed4:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait 30ms*/
	_delay_ms(30);
	/*send Function set command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    1ed6:	80 e2       	ldi	r24, 0x20	; 32
    1ed8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET&0xF0));
    1edc:	80 e2       	ldi	r24, 0x20	; 32
    1ede:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_FUNCTIONSET<<4));
    1ee2:	80 e8       	ldi	r24, 0x80	; 128
    1ee4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	a0 e8       	ldi	r26, 0x80	; 128
    1eee:	bf e3       	ldi	r27, 0x3F	; 63
    1ef0:	8f a3       	std	Y+39, r24	; 0x27
    1ef2:	98 a7       	std	Y+40, r25	; 0x28
    1ef4:	a9 a7       	std	Y+41, r26	; 0x29
    1ef6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef8:	6f a1       	ldd	r22, Y+39	; 0x27
    1efa:	78 a5       	ldd	r23, Y+40	; 0x28
    1efc:	89 a5       	ldd	r24, Y+41	; 0x29
    1efe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a e7       	ldi	r20, 0x7A	; 122
    1f06:	55 e4       	ldi	r21, 0x45	; 69
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8b a3       	std	Y+35, r24	; 0x23
    1f12:	9c a3       	std	Y+36, r25	; 0x24
    1f14:	ad a3       	std	Y+37, r26	; 0x25
    1f16:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f18:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1f1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	2c f4       	brge	.+10     	; 0x1f3a <HAL_VidHCLCD_4BitModeInit+0x15c>
		__ticks = 1;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9a a3       	std	Y+34, r25	; 0x22
    1f36:	89 a3       	std	Y+33, r24	; 0x21
    1f38:	3f c0       	rjmp	.+126    	; 0x1fb8 <HAL_VidHCLCD_4BitModeInit+0x1da>
	else if (__tmp > 65535)
    1f3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f40:	9e a1       	ldd	r25, Y+38	; 0x26
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	3f ef       	ldi	r19, 0xFF	; 255
    1f46:	4f e7       	ldi	r20, 0x7F	; 127
    1f48:	57 e4       	ldi	r21, 0x47	; 71
    1f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4e:	18 16       	cp	r1, r24
    1f50:	4c f5       	brge	.+82     	; 0x1fa4 <HAL_VidHCLCD_4BitModeInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f52:	6f a1       	ldd	r22, Y+39	; 0x27
    1f54:	78 a5       	ldd	r23, Y+40	; 0x28
    1f56:	89 a5       	ldd	r24, Y+41	; 0x29
    1f58:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	cd 01       	movw	r24, r26
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9a a3       	std	Y+34, r25	; 0x22
    1f78:	89 a3       	std	Y+33, r24	; 0x21
    1f7a:	0f c0       	rjmp	.+30     	; 0x1f9a <HAL_VidHCLCD_4BitModeInit+0x1bc>
    1f7c:	80 e9       	ldi	r24, 0x90	; 144
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	98 a3       	std	Y+32, r25	; 0x20
    1f82:	8f 8f       	std	Y+31, r24	; 0x1f
    1f84:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f86:	98 a1       	ldd	r25, Y+32	; 0x20
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <HAL_VidHCLCD_4BitModeInit+0x1aa>
    1f8c:	98 a3       	std	Y+32, r25	; 0x20
    1f8e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f90:	89 a1       	ldd	r24, Y+33	; 0x21
    1f92:	9a a1       	ldd	r25, Y+34	; 0x22
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	9a a3       	std	Y+34, r25	; 0x22
    1f98:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9e:	00 97       	sbiw	r24, 0x00	; 0
    1fa0:	69 f7       	brne	.-38     	; 0x1f7c <HAL_VidHCLCD_4BitModeInit+0x19e>
    1fa2:	14 c0       	rjmp	.+40     	; 0x1fcc <HAL_VidHCLCD_4BitModeInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1faa:	9e a1       	ldd	r25, Y+38	; 0x26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9a a3       	std	Y+34, r25	; 0x22
    1fb6:	89 a3       	std	Y+33, r24	; 0x21
    1fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fba:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbc:	9e 8f       	std	Y+30, r25	; 0x1e
    1fbe:	8d 8f       	std	Y+29, r24	; 0x1d
    1fc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fc2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <HAL_VidHCLCD_4BitModeInit+0x1e6>
    1fc8:	9e 8f       	std	Y+30, r25	; 0x1e
    1fca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Send Display on off command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF&0xF0));
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPLAYON_OFF<<4));
    1fd2:	80 ef       	ldi	r24, 0xF0	; 240
    1fd4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	a0 e8       	ldi	r26, 0x80	; 128
    1fde:	bf e3       	ldi	r27, 0x3F	; 63
    1fe0:	89 8f       	std	Y+25, r24	; 0x19
    1fe2:	9a 8f       	std	Y+26, r25	; 0x1a
    1fe4:	ab 8f       	std	Y+27, r26	; 0x1b
    1fe6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe8:	69 8d       	ldd	r22, Y+25	; 0x19
    1fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	4a e7       	ldi	r20, 0x7A	; 122
    1ff6:	55 e4       	ldi	r21, 0x45	; 69
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	8d 8b       	std	Y+21, r24	; 0x15
    2002:	9e 8b       	std	Y+22, r25	; 0x16
    2004:	af 8b       	std	Y+23, r26	; 0x17
    2006:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2008:	6d 89       	ldd	r22, Y+21	; 0x15
    200a:	7e 89       	ldd	r23, Y+22	; 0x16
    200c:	8f 89       	ldd	r24, Y+23	; 0x17
    200e:	98 8d       	ldd	r25, Y+24	; 0x18
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e8       	ldi	r20, 0x80	; 128
    2016:	5f e3       	ldi	r21, 0x3F	; 63
    2018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    201c:	88 23       	and	r24, r24
    201e:	2c f4       	brge	.+10     	; 0x202a <HAL_VidHCLCD_4BitModeInit+0x24c>
		__ticks = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 8b       	std	Y+20, r25	; 0x14
    2026:	8b 8b       	std	Y+19, r24	; 0x13
    2028:	3f c0       	rjmp	.+126    	; 0x20a8 <HAL_VidHCLCD_4BitModeInit+0x2ca>
	else if (__tmp > 65535)
    202a:	6d 89       	ldd	r22, Y+21	; 0x15
    202c:	7e 89       	ldd	r23, Y+22	; 0x16
    202e:	8f 89       	ldd	r24, Y+23	; 0x17
    2030:	98 8d       	ldd	r25, Y+24	; 0x18
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	4f e7       	ldi	r20, 0x7F	; 127
    2038:	57 e4       	ldi	r21, 0x47	; 71
    203a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203e:	18 16       	cp	r1, r24
    2040:	4c f5       	brge	.+82     	; 0x2094 <HAL_VidHCLCD_4BitModeInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2042:	69 8d       	ldd	r22, Y+25	; 0x19
    2044:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e2       	ldi	r20, 0x20	; 32
    2050:	51 e4       	ldi	r21, 0x41	; 65
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2062:	dc 01       	movw	r26, r24
    2064:	cb 01       	movw	r24, r22
    2066:	9c 8b       	std	Y+20, r25	; 0x14
    2068:	8b 8b       	std	Y+19, r24	; 0x13
    206a:	0f c0       	rjmp	.+30     	; 0x208a <HAL_VidHCLCD_4BitModeInit+0x2ac>
    206c:	80 e9       	ldi	r24, 0x90	; 144
    206e:	91 e0       	ldi	r25, 0x01	; 1
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	89 8b       	std	Y+17, r24	; 0x11
    2074:	89 89       	ldd	r24, Y+17	; 0x11
    2076:	9a 89       	ldd	r25, Y+18	; 0x12
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <HAL_VidHCLCD_4BitModeInit+0x29a>
    207c:	9a 8b       	std	Y+18, r25	; 0x12
    207e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2080:	8b 89       	ldd	r24, Y+19	; 0x13
    2082:	9c 89       	ldd	r25, Y+20	; 0x14
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	9c 8b       	std	Y+20, r25	; 0x14
    2088:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208a:	8b 89       	ldd	r24, Y+19	; 0x13
    208c:	9c 89       	ldd	r25, Y+20	; 0x14
    208e:	00 97       	sbiw	r24, 0x00	; 0
    2090:	69 f7       	brne	.-38     	; 0x206c <HAL_VidHCLCD_4BitModeInit+0x28e>
    2092:	14 c0       	rjmp	.+40     	; 0x20bc <HAL_VidHCLCD_4BitModeInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2094:	6d 89       	ldd	r22, Y+21	; 0x15
    2096:	7e 89       	ldd	r23, Y+22	; 0x16
    2098:	8f 89       	ldd	r24, Y+23	; 0x17
    209a:	98 8d       	ldd	r25, Y+24	; 0x18
    209c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9c 8b       	std	Y+20, r25	; 0x14
    20a6:	8b 8b       	std	Y+19, r24	; 0x13
    20a8:	8b 89       	ldd	r24, Y+19	; 0x13
    20aa:	9c 89       	ldd	r25, Y+20	; 0x14
    20ac:	98 8b       	std	Y+16, r25	; 0x10
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
    20b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b2:	98 89       	ldd	r25, Y+16	; 0x10
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <HAL_VidHCLCD_4BitModeInit+0x2d6>
    20b8:	98 8b       	std	Y+16, r25	; 0x10
    20ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*Send Display Clear command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR&0xF0));
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_DISPALYCLEAR<<4));
    20c2:	80 e1       	ldi	r24, 0x10	; 16
    20c4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	a0 e0       	ldi	r26, 0x00	; 0
    20ce:	b0 e4       	ldi	r27, 0x40	; 64
    20d0:	8b 87       	std	Y+11, r24	; 0x0b
    20d2:	9c 87       	std	Y+12, r25	; 0x0c
    20d4:	ad 87       	std	Y+13, r26	; 0x0d
    20d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20da:	7c 85       	ldd	r23, Y+12	; 0x0c
    20dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20de:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	4a e7       	ldi	r20, 0x7A	; 122
    20e6:	55 e4       	ldi	r21, 0x45	; 69
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8f 83       	std	Y+7, r24	; 0x07
    20f2:	98 87       	std	Y+8, r25	; 0x08
    20f4:	a9 87       	std	Y+9, r26	; 0x09
    20f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e8       	ldi	r20, 0x80	; 128
    2106:	5f e3       	ldi	r21, 0x3F	; 63
    2108:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210c:	88 23       	and	r24, r24
    210e:	2c f4       	brge	.+10     	; 0x211a <HAL_VidHCLCD_4BitModeInit+0x33c>
		__ticks = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	9e 83       	std	Y+6, r25	; 0x06
    2116:	8d 83       	std	Y+5, r24	; 0x05
    2118:	3f c0       	rjmp	.+126    	; 0x2198 <HAL_VidHCLCD_4BitModeInit+0x3ba>
	else if (__tmp > 65535)
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	3f ef       	ldi	r19, 0xFF	; 255
    2126:	4f e7       	ldi	r20, 0x7F	; 127
    2128:	57 e4       	ldi	r21, 0x47	; 71
    212a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212e:	18 16       	cp	r1, r24
    2130:	4c f5       	brge	.+82     	; 0x2184 <HAL_VidHCLCD_4BitModeInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2132:	6b 85       	ldd	r22, Y+11	; 0x0b
    2134:	7c 85       	ldd	r23, Y+12	; 0x0c
    2136:	8d 85       	ldd	r24, Y+13	; 0x0d
    2138:	9e 85       	ldd	r25, Y+14	; 0x0e
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e2       	ldi	r20, 0x20	; 32
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	bc 01       	movw	r22, r24
    214c:	cd 01       	movw	r24, r26
    214e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	9e 83       	std	Y+6, r25	; 0x06
    2158:	8d 83       	std	Y+5, r24	; 0x05
    215a:	0f c0       	rjmp	.+30     	; 0x217a <HAL_VidHCLCD_4BitModeInit+0x39c>
    215c:	80 e9       	ldi	r24, 0x90	; 144
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	f1 f7       	brne	.-4      	; 0x2168 <HAL_VidHCLCD_4BitModeInit+0x38a>
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	9e 83       	std	Y+6, r25	; 0x06
    2178:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217a:	8d 81       	ldd	r24, Y+5	; 0x05
    217c:	9e 81       	ldd	r25, Y+6	; 0x06
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	69 f7       	brne	.-38     	; 0x215c <HAL_VidHCLCD_4BitModeInit+0x37e>
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <HAL_VidHCLCD_4BitModeInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2184:	6f 81       	ldd	r22, Y+7	; 0x07
    2186:	78 85       	ldd	r23, Y+8	; 0x08
    2188:	89 85       	ldd	r24, Y+9	; 0x09
    218a:	9a 85       	ldd	r25, Y+10	; 0x0a
    218c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9e 83       	std	Y+6, r25	; 0x06
    2196:	8d 83       	std	Y+5, r24	; 0x05
    2198:	8d 81       	ldd	r24, Y+5	; 0x05
    219a:	9e 81       	ldd	r25, Y+6	; 0x06
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	9a 81       	ldd	r25, Y+2	; 0x02
    21a4:	01 97       	sbiw	r24, 0x01	; 1
    21a6:	f1 f7       	brne	.-4      	; 0x21a4 <HAL_VidHCLCD_4BitModeInit+0x3c6>
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*Send Entry Mode command*/
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE&0xF0));
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((SET_ENTRYMODE<<4));
    21b2:	80 e6       	ldi	r24, 0x60	; 96
    21b4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    21b8:	e8 96       	adiw	r28, 0x38	; 56
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <HAL_VidHCLCD_4BitModeSendCommand>:
void HAL_VidHCLCD_4BitModeSendCommand(uint8 Copy_uint8Command)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	0f 92       	push	r0
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	89 83       	std	Y+1, r24	; 0x01
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command&0xF0));
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	80 7f       	andi	r24, 0xF0	; 240
    21da:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
	HAL_VidHCLCD_4BitModeWriteCommand((Copy_uint8Command<<4));
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	82 95       	swap	r24
    21e2:	80 7f       	andi	r24, 0xF0	; 240
    21e4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <HAL_VidHCLCD_4BitModeWriteCommand>
}
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <HAL_VidHCLCD_4BitModeWriteString>:
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <HAL_VidHCLCD_4BitModeWriteString+0x6>
    21f6:	0f 92       	push	r0
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
    21fc:	9b 83       	std	Y+3, r25	; 0x03
    21fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Loc_uint8Count=0;
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <HAL_VidHCLCD_4BitModeWriteString+0x30>
	while(Copy_uint8String[Loc_uint8Count]!='\0')
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	9b 81       	ldd	r25, Y+3	; 0x03
    220e:	fc 01       	movw	r30, r24
    2210:	e2 0f       	add	r30, r18
    2212:	f3 1f       	adc	r31, r19
    2214:	80 81       	ld	r24, Z
    2216:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HAL_VidHCLCD_4BitModeWriteChar>
		Loc_uint8Count++;
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	8f 5f       	subi	r24, 0xFF	; 255
    221e:	89 83       	std	Y+1, r24	; 0x01
}
/*AMIT'\0'*/
void HAL_VidHCLCD_4BitModeWriteString(uint8 *Copy_uint8String)
{
	uint8 Loc_uint8Count=0;
	while(Copy_uint8String[Loc_uint8Count]!='\0')
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	8a 81       	ldd	r24, Y+2	; 0x02
    2228:	9b 81       	ldd	r25, Y+3	; 0x03
    222a:	fc 01       	movw	r30, r24
    222c:	e2 0f       	add	r30, r18
    222e:	f3 1f       	adc	r31, r19
    2230:	80 81       	ld	r24, Z
    2232:	88 23       	and	r24, r24
    2234:	39 f7       	brne	.-50     	; 0x2204 <HAL_VidHCLCD_4BitModeWriteString+0x14>
	{
		HAL_VidHCLCD_4BitModeWriteChar(Copy_uint8String[Loc_uint8Count]);
		Loc_uint8Count++;
	}
}
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <HAL_VidHCLCD_4BitModeWriteNumber>:
/*1234*/
void HAL_VidHCLCD_4BitModeWriteNumber(uint32 Copy_uint32Number)
{
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	65 97       	sbiw	r28, 0x15	; 21
    2250:	0f b6       	in	r0, 0x3f	; 63
    2252:	f8 94       	cli
    2254:	de bf       	out	0x3e, r29	; 62
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	cd bf       	out	0x3d, r28	; 61
    225a:	6a 8b       	std	Y+18, r22	; 0x12
    225c:	7b 8b       	std	Y+19, r23	; 0x13
    225e:	8c 8b       	std	Y+20, r24	; 0x14
    2260:	9d 8b       	std	Y+21, r25	; 0x15
	uint8 Loc_uint8Digits[16];
	sint8 Loc_sint8Count=0;
    2262:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_uint32Number==0)
    2264:	8a 89       	ldd	r24, Y+18	; 0x12
    2266:	9b 89       	ldd	r25, Y+19	; 0x13
    2268:	ac 89       	ldd	r26, Y+20	; 0x14
    226a:	bd 89       	ldd	r27, Y+21	; 0x15
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	a1 05       	cpc	r26, r1
    2270:	b1 05       	cpc	r27, r1
    2272:	99 f5       	brne	.+102    	; 0x22da <HAL_VidHCLCD_4BitModeWriteNumber+0x98>
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
    2274:	80 e3       	ldi	r24, 0x30	; 48
    2276:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HAL_VidHCLCD_4BitModeWriteChar>
    227a:	4f c0       	rjmp	.+158    	; 0x231a <HAL_VidHCLCD_4BitModeWriteNumber+0xd8>
	}
	else
	{
		while(Copy_uint32Number!=0)
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	08 2f       	mov	r16, r24
    2280:	11 27       	eor	r17, r17
    2282:	07 fd       	sbrc	r16, 7
    2284:	10 95       	com	r17
    2286:	8a 89       	ldd	r24, Y+18	; 0x12
    2288:	9b 89       	ldd	r25, Y+19	; 0x13
    228a:	ac 89       	ldd	r26, Y+20	; 0x14
    228c:	bd 89       	ldd	r27, Y+21	; 0x15
    228e:	2a e0       	ldi	r18, 0x0A	; 10
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodsi4>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	28 2f       	mov	r18, r24
    22a4:	ce 01       	movw	r24, r28
    22a6:	02 96       	adiw	r24, 0x02	; 2
    22a8:	fc 01       	movw	r30, r24
    22aa:	e0 0f       	add	r30, r16
    22ac:	f1 1f       	adc	r31, r17
    22ae:	20 83       	st	Z, r18
			Copy_uint32Number/=10;
    22b0:	8a 89       	ldd	r24, Y+18	; 0x12
    22b2:	9b 89       	ldd	r25, Y+19	; 0x13
    22b4:	ac 89       	ldd	r26, Y+20	; 0x14
    22b6:	bd 89       	ldd	r27, Y+21	; 0x15
    22b8:	2a e0       	ldi	r18, 0x0A	; 10
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 86 12 	call	0x250c	; 0x250c <__udivmodsi4>
    22c8:	da 01       	movw	r26, r20
    22ca:	c9 01       	movw	r24, r18
    22cc:	8a 8b       	std	Y+18, r24	; 0x12
    22ce:	9b 8b       	std	Y+19, r25	; 0x13
    22d0:	ac 8b       	std	Y+20, r26	; 0x14
    22d2:	bd 8b       	std	Y+21, r27	; 0x15
			Loc_sint8Count++;
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	8f 5f       	subi	r24, 0xFF	; 255
    22d8:	89 83       	std	Y+1, r24	; 0x01
	{
		HAL_VidHCLCD_4BitModeWriteChar(0+48);
	}
	else
	{
		while(Copy_uint32Number!=0)
    22da:	8a 89       	ldd	r24, Y+18	; 0x12
    22dc:	9b 89       	ldd	r25, Y+19	; 0x13
    22de:	ac 89       	ldd	r26, Y+20	; 0x14
    22e0:	bd 89       	ldd	r27, Y+21	; 0x15
    22e2:	00 97       	sbiw	r24, 0x00	; 0
    22e4:	a1 05       	cpc	r26, r1
    22e6:	b1 05       	cpc	r27, r1
    22e8:	49 f6       	brne	.-110    	; 0x227c <HAL_VidHCLCD_4BitModeWriteNumber+0x3a>
		{
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	81 50       	subi	r24, 0x01	; 1
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	11 c0       	rjmp	.+34     	; 0x2314 <HAL_VidHCLCD_4BitModeWriteNumber+0xd2>
		while(Loc_sint8Count>=0)
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	33 27       	eor	r19, r19
    22f8:	27 fd       	sbrc	r18, 7
    22fa:	30 95       	com	r19
    22fc:	ce 01       	movw	r24, r28
    22fe:	02 96       	adiw	r24, 0x02	; 2
    2300:	fc 01       	movw	r30, r24
    2302:	e2 0f       	add	r30, r18
    2304:	f3 1f       	adc	r31, r19
    2306:	80 81       	ld	r24, Z
    2308:	80 5d       	subi	r24, 0xD0	; 208
    230a:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <HAL_VidHCLCD_4BitModeWriteChar>
			Loc_sint8Count--;
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	81 50       	subi	r24, 0x01	; 1
    2312:	89 83       	std	Y+1, r24	; 0x01
			Loc_uint8Digits[Loc_sint8Count]=Copy_uint32Number%10;
			Copy_uint32Number/=10;
			Loc_sint8Count++;
		}
		Loc_sint8Count-=1;
		while(Loc_sint8Count>=0)
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	88 23       	and	r24, r24
    2318:	64 f7       	brge	.-40     	; 0x22f2 <HAL_VidHCLCD_4BitModeWriteNumber+0xb0>
		{
			HAL_VidHCLCD_4BitModeWriteChar(Loc_uint8Digits[Loc_sint8Count]+48);
			Loc_sint8Count--;
		}
	}
}
    231a:	65 96       	adiw	r28, 0x15	; 21
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
    2326:	cf 91       	pop	r28
    2328:	df 91       	pop	r29
    232a:	1f 91       	pop	r17
    232c:	0f 91       	pop	r16
    232e:	08 95       	ret

00002330 <HAL_VidHCLCD_4BitModeSetPosition>:
void HAL_VidHCLCD_4BitModeSetPosition(uint8 Copy_uint8LineNum,uint8 Copy_uint8Position)
{
    2330:	df 93       	push	r29
    2332:	cf 93       	push	r28
    2334:	00 d0       	rcall	.+0      	; 0x2336 <HAL_VidHCLCD_4BitModeSetPosition+0x6>
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_uint8LineNum==1)
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	29 f4       	brne	.+10     	; 0x234e <HAL_VidHCLCD_4BitModeSetPosition+0x1e>
	{
		HAL_VidHCLCD_4BitModeSendCommand(128+Copy_uint8Position);
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	80 58       	subi	r24, 0x80	; 128
    2348:	0e 94 e5 10 	call	0x21ca	; 0x21ca <HAL_VidHCLCD_4BitModeSendCommand>
    234c:	07 c0       	rjmp	.+14     	; 0x235c <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	}
	else if(Copy_uint8LineNum==2)
    234e:	89 81       	ldd	r24, Y+1	; 0x01
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	21 f4       	brne	.+8      	; 0x235c <HAL_VidHCLCD_4BitModeSetPosition+0x2c>
	{
		HAL_VidHCLCD_4BitModeSendCommand(192+Copy_uint8Position);
    2354:	8a 81       	ldd	r24, Y+2	; 0x02
    2356:	80 54       	subi	r24, 0x40	; 64
    2358:	0e 94 e5 10 	call	0x21ca	; 0x21ca <HAL_VidHCLCD_4BitModeSendCommand>
	}
	else
	{
		/*Do Nothing*/
	}
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <APP_VidTEXTI1>:
uint8 global_uint8MIN=0;
uint8 global_uint8HOUR=0;


void APP_VidTEXTI1(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	/*check for start condition*/
	global_uint8flag=1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	80 93 7c 00 	sts	0x007C, r24
}
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <APP_VidTEXTI0>:
void APP_VidTEXTI0(void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
	/*check for reset condition*/
	global_uint8SEC=0;
    2382:	10 92 7d 00 	sts	0x007D, r1
	global_uint8MIN=0;
    2386:	10 92 7e 00 	sts	0x007E, r1
	global_uint8HOUR=0;
    238a:	10 92 7f 00 	sts	0x007F, r1
}
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	08 95       	ret

00002394 <APP_VidTOV>:
void APP_VidTOV(void)
{
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
		global_uint8SEC++;
    239c:	80 91 7d 00 	lds	r24, 0x007D
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	80 93 7d 00 	sts	0x007D, r24
		if(global_uint8SEC==60)
    23a6:	80 91 7d 00 	lds	r24, 0x007D
    23aa:	8c 33       	cpi	r24, 0x3C	; 60
    23ac:	39 f4       	brne	.+14     	; 0x23bc <APP_VidTOV+0x28>
		{
			global_uint8SEC=0;
    23ae:	10 92 7d 00 	sts	0x007D, r1
			global_uint8MIN+=1;
    23b2:	80 91 7e 00 	lds	r24, 0x007E
    23b6:	8f 5f       	subi	r24, 0xFF	; 255
    23b8:	80 93 7e 00 	sts	0x007E, r24
		}
		if(global_uint8MIN==60)
    23bc:	80 91 7e 00 	lds	r24, 0x007E
    23c0:	8c 33       	cpi	r24, 0x3C	; 60
    23c2:	39 f4       	brne	.+14     	; 0x23d2 <APP_VidTOV+0x3e>
		{
			global_uint8MIN=0;
    23c4:	10 92 7e 00 	sts	0x007E, r1
			global_uint8HOUR+=1;
    23c8:	80 91 7f 00 	lds	r24, 0x007F
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	80 93 7f 00 	sts	0x007F, r24
		}
		if(global_uint8HOUR==24)
    23d2:	80 91 7f 00 	lds	r24, 0x007F
    23d6:	88 31       	cpi	r24, 0x18	; 24
    23d8:	31 f4       	brne	.+12     	; 0x23e6 <APP_VidTOV+0x52>
		{
			global_uint8SEC=0;
    23da:	10 92 7d 00 	sts	0x007D, r1
			global_uint8MIN=0;
    23de:	10 92 7e 00 	sts	0x007E, r1
			global_uint8HOUR=0;
    23e2:	10 92 7f 00 	sts	0x007F, r1
		}
}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <main>:

int main(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
					/*Initialize LCD*/
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RS_PIN,PIN_OUTPUT);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,RW_PIN,PIN_OUTPUT);
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	62 e0       	ldi	r22, 0x02	; 2
    2402:	41 e0       	ldi	r20, 0x01	; 1
    2404:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_ControlPort,E_PIN,PIN_OUTPUT);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	63 e0       	ldi	r22, 0x03	; 3
    240c:	41 e0       	ldi	r20, 0x01	; 1
    240e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>

	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN4,PIN_OUTPUT);
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	64 e0       	ldi	r22, 0x04	; 4
    2416:	41 e0       	ldi	r20, 0x01	; 1
    2418:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN5,PIN_OUTPUT);
    241c:	80 e0       	ldi	r24, 0x00	; 0
    241e:	65 e0       	ldi	r22, 0x05	; 5
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN6,PIN_OUTPUT);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	66 e0       	ldi	r22, 0x06	; 6
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(HCLCD_DataPort,PIN7,PIN_OUTPUT);
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	67 e0       	ldi	r22, 0x07	; 7
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
				/*initialize LCD*/
	HAL_VidHCLCD_4BitModeInit();
    243a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <HAL_VidHCLCD_4BitModeInit>
	HAL_VidHCLCD_4BitModeSetPosition(1,0);
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	60 e0       	ldi	r22, 0x00	; 0
    2442:	0e 94 98 11 	call	0x2330	; 0x2330 <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"stop Watch");
    2446:	80 e6       	ldi	r24, 0x60	; 96
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_VidHCLCD_4BitModeWriteString>
	HAL_VidHCLCD_4BitModeSetPosition(2,0);
    244e:	82 e0       	ldi	r24, 0x02	; 2
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	0e 94 98 11 	call	0x2330	; 0x2330 <HAL_VidHCLCD_4BitModeSetPosition>
	HAL_VidHCLCD_4BitModeWriteString((uint8*)"00:00:00");
    2456:	8b e6       	ldi	r24, 0x6B	; 107
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_VidHCLCD_4BitModeWriteString>


	/*Set INT0,1 PIN*/
	MDIO_Errorstate_SetPinDirection(MDIO_PORTD,PIN3,PIN_INPUT);
    245e:	83 e0       	ldi	r24, 0x03	; 3
    2460:	63 e0       	ldi	r22, 0x03	; 3
    2462:	40 e0       	ldi	r20, 0x00	; 0
    2464:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	MDIO_Errorstate_SetPinDirection(MDIO_PORTD,PIN2,PIN_INPUT);
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	62 e0       	ldi	r22, 0x02	; 2
    246c:	40 e0       	ldi	r20, 0x00	; 0
    246e:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MDIO_Errorstate_SetPinDirection>
	/*Active Pull up resistor*/
	MDIO_Errorstate_SetPinValue(MDIO_PORTD,PIN2,PIN_HIGH);
    2472:	83 e0       	ldi	r24, 0x03	; 3
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>
	MDIO_Errorstate_SetPinValue(MDIO_PORTD,PIN3,PIN_HIGH);
    247c:	83 e0       	ldi	r24, 0x03	; 3
    247e:	63 e0       	ldi	r22, 0x03	; 3
    2480:	41 e0       	ldi	r20, 0x01	; 1
    2482:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <MDIO_Errorstate_SetPinValue>

		/*set Timer1-->CTC mode PreScaler-->256 to get interrupt every 1 sec*/
	MTIMER1_VidTimer1_CTC_SetCallBack(APP_VidTOV);
    2486:	8a ec       	ldi	r24, 0xCA	; 202
    2488:	91 e1       	ldi	r25, 0x11	; 17
    248a:	0e 94 97 06 	call	0xd2e	; 0xd2e <MTIMER1_VidTimer1_CTC_SetCallBack>
	MTIMER1_VidSetCTCRegister_CHA(62534);
    248e:	86 e4       	ldi	r24, 0x46	; 70
    2490:	94 ef       	ldi	r25, 0xF4	; 244
    2492:	0e 94 61 06 	call	0xcc2	; 0xcc2 <MTIMER1_VidSetCTCRegister_CHA>
	MTIMER1_VidInit();
    2496:	0e 94 a3 05 	call	0xb46	; 0xb46 <MTIMER1_VidInit>
		/*Start stop watch*/
	MEXTI1_VidSetCallBack(APP_VidTEXTI1);
    249a:	83 eb       	ldi	r24, 0xB3	; 179
    249c:	91 e1       	ldi	r25, 0x11	; 17
    249e:	0e 94 c5 08 	call	0x118a	; 0x118a <MEXTI1_VidSetCallBack>
		/*for reset stop watch*/
	MEXTI0_VidSetCallBack(APP_VidTEXTI0);
    24a2:	8d eb       	ldi	r24, 0xBD	; 189
    24a4:	91 e1       	ldi	r25, 0x11	; 17
    24a6:	0e 94 b3 08 	call	0x1166	; 0x1166 <MEXTI0_VidSetCallBack>

	/*Enable GIE - PIE  interrupt*/
	MGIE_Enable();
    24aa:	0e 94 7f 07 	call	0xefe	; 0xefe <MGIE_Enable>
	MEXTI_VidInitEXTI0();
    24ae:	0e 94 9b 07 	call	0xf36	; 0xf36 <MEXTI_VidInitEXTI0>
	MEXTI_VidInitEXTI1();
    24b2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MEXTI_VidInitEXTI1>

	while(1)
	{
				HAL_VidHCLCD_4BitModeSetPosition(2,6);
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	66 e0       	ldi	r22, 0x06	; 6
    24ba:	0e 94 98 11 	call	0x2330	; 0x2330 <HAL_VidHCLCD_4BitModeSetPosition>
				HAL_VidHCLCD_4BitModeWriteNumber(global_uint8SEC);
    24be:	80 91 7d 00 	lds	r24, 0x007D
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	a0 e0       	ldi	r26, 0x00	; 0
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 21 11 	call	0x2242	; 0x2242 <HAL_VidHCLCD_4BitModeWriteNumber>

				HAL_VidHCLCD_4BitModeSetPosition(2,4);
    24d2:	82 e0       	ldi	r24, 0x02	; 2
    24d4:	64 e0       	ldi	r22, 0x04	; 4
    24d6:	0e 94 98 11 	call	0x2330	; 0x2330 <HAL_VidHCLCD_4BitModeSetPosition>
				HAL_VidHCLCD_4BitModeWriteNumber(global_uint8MIN);
    24da:	80 91 7e 00 	lds	r24, 0x007E
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e0       	ldi	r26, 0x00	; 0
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 21 11 	call	0x2242	; 0x2242 <HAL_VidHCLCD_4BitModeWriteNumber>

				HAL_VidHCLCD_4BitModeSetPosition(2,1);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	61 e0       	ldi	r22, 0x01	; 1
    24f2:	0e 94 98 11 	call	0x2330	; 0x2330 <HAL_VidHCLCD_4BitModeSetPosition>
				HAL_VidHCLCD_4BitModeWriteNumber(global_uint8HOUR);
    24f6:	80 91 7f 00 	lds	r24, 0x007F
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	a0 e0       	ldi	r26, 0x00	; 0
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 21 11 	call	0x2242	; 0x2242 <HAL_VidHCLCD_4BitModeWriteNumber>
    250a:	d5 cf       	rjmp	.-86     	; 0x24b6 <main+0xca>

0000250c <__udivmodsi4>:
    250c:	a1 e2       	ldi	r26, 0x21	; 33
    250e:	1a 2e       	mov	r1, r26
    2510:	aa 1b       	sub	r26, r26
    2512:	bb 1b       	sub	r27, r27
    2514:	fd 01       	movw	r30, r26
    2516:	0d c0       	rjmp	.+26     	; 0x2532 <__udivmodsi4_ep>

00002518 <__udivmodsi4_loop>:
    2518:	aa 1f       	adc	r26, r26
    251a:	bb 1f       	adc	r27, r27
    251c:	ee 1f       	adc	r30, r30
    251e:	ff 1f       	adc	r31, r31
    2520:	a2 17       	cp	r26, r18
    2522:	b3 07       	cpc	r27, r19
    2524:	e4 07       	cpc	r30, r20
    2526:	f5 07       	cpc	r31, r21
    2528:	20 f0       	brcs	.+8      	; 0x2532 <__udivmodsi4_ep>
    252a:	a2 1b       	sub	r26, r18
    252c:	b3 0b       	sbc	r27, r19
    252e:	e4 0b       	sbc	r30, r20
    2530:	f5 0b       	sbc	r31, r21

00002532 <__udivmodsi4_ep>:
    2532:	66 1f       	adc	r22, r22
    2534:	77 1f       	adc	r23, r23
    2536:	88 1f       	adc	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	1a 94       	dec	r1
    253c:	69 f7       	brne	.-38     	; 0x2518 <__udivmodsi4_loop>
    253e:	60 95       	com	r22
    2540:	70 95       	com	r23
    2542:	80 95       	com	r24
    2544:	90 95       	com	r25
    2546:	9b 01       	movw	r18, r22
    2548:	ac 01       	movw	r20, r24
    254a:	bd 01       	movw	r22, r26
    254c:	cf 01       	movw	r24, r30
    254e:	08 95       	ret

00002550 <__prologue_saves__>:
    2550:	2f 92       	push	r2
    2552:	3f 92       	push	r3
    2554:	4f 92       	push	r4
    2556:	5f 92       	push	r5
    2558:	6f 92       	push	r6
    255a:	7f 92       	push	r7
    255c:	8f 92       	push	r8
    255e:	9f 92       	push	r9
    2560:	af 92       	push	r10
    2562:	bf 92       	push	r11
    2564:	cf 92       	push	r12
    2566:	df 92       	push	r13
    2568:	ef 92       	push	r14
    256a:	ff 92       	push	r15
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	ca 1b       	sub	r28, r26
    257a:	db 0b       	sbc	r29, r27
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	09 94       	ijmp

00002588 <__epilogue_restores__>:
    2588:	2a 88       	ldd	r2, Y+18	; 0x12
    258a:	39 88       	ldd	r3, Y+17	; 0x11
    258c:	48 88       	ldd	r4, Y+16	; 0x10
    258e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2590:	6e 84       	ldd	r6, Y+14	; 0x0e
    2592:	7d 84       	ldd	r7, Y+13	; 0x0d
    2594:	8c 84       	ldd	r8, Y+12	; 0x0c
    2596:	9b 84       	ldd	r9, Y+11	; 0x0b
    2598:	aa 84       	ldd	r10, Y+10	; 0x0a
    259a:	b9 84       	ldd	r11, Y+9	; 0x09
    259c:	c8 84       	ldd	r12, Y+8	; 0x08
    259e:	df 80       	ldd	r13, Y+7	; 0x07
    25a0:	ee 80       	ldd	r14, Y+6	; 0x06
    25a2:	fd 80       	ldd	r15, Y+5	; 0x05
    25a4:	0c 81       	ldd	r16, Y+4	; 0x04
    25a6:	1b 81       	ldd	r17, Y+3	; 0x03
    25a8:	aa 81       	ldd	r26, Y+2	; 0x02
    25aa:	b9 81       	ldd	r27, Y+1	; 0x01
    25ac:	ce 0f       	add	r28, r30
    25ae:	d1 1d       	adc	r29, r1
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	ed 01       	movw	r28, r26
    25bc:	08 95       	ret

000025be <_exit>:
    25be:	f8 94       	cli

000025c0 <__stop_program>:
    25c0:	ff cf       	rjmp	.-2      	; 0x25c0 <__stop_program>
